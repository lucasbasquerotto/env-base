name: "{{ project_name }}"
ctxs: "{{ project_ctxs }}"
original_env_schema: "{{ env.repo_dir }}/cloud/aws.schema.yml"
meta:
  template_no_empty_lines: true
cloud:
  repo: "cloud"
  ext_repos:
    - repo: "ext_cloud"
      dir: "ext-cloud"
  collections:
    - namespace: "lrd"
      collection: "ext_cloud"
      path: "ext-cloud/collection"
  hosts:
    type: "template"
    file: "files/hosts.tpl.ini"
    schema: "files/hosts.schema.yml"
main:
  vpn:
    extend_cloud: true
    initial_services: ["vpn_service"]
  cdn:
    extend_cloud: true
    initial_services:
      - name: "cdn_service"
        can_destroy: true
services:
  vpn_service:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/aws/aws.main.vpn.yml"
    schema: "tasks/vpn/aws/aws.schema.vpn.yml"
    validator: "tasks/vpn/aws/aws.validator.vpn.yml"
    credentials:
      vpn: "aws"
    params:
      security_groups:
        - name: "group1"
          description: sg with rule descriptions
          vpc_id: vpc-xxxxxxxx
          region: us-east-1
          rules:
            - proto: tcp
              ports:
              - 80
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 80
        - name: "group2"
          description: an example EC2 group
          vpc_id: "12345"
          region: eu-west-1
          rules:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 10.0.0.0/8
            - proto: tcp
              from_port: 443
              to_port: 443
              # this should only be needed for EC2 Classic security group rules
              # because in a VPC an ELB will use a user-account security group
              group_id: amazon-elb/sg-87654321/amazon-elb-sg
            - proto: tcp
              from_port: 3306
              to_port: 3306
              group_id: 123412341234/sg-87654321/exact-name-of-sg
            - proto: udp
              from_port: 10050
              to_port: 10050
              cidr_ip: 10.0.0.0/8
            - proto: udp
              from_port: 10051
              to_port: 10051
              group_id: sg-12345678
            - proto: icmp
              from_port: 8 # icmp type, -1 = any type
              to_port:  -1 # icmp subtype, -1 = any subtype
              cidr_ip: 10.0.0.0/8
            - proto: all
              # the containing group name may be specified here
              group_name: example
            - proto: all
              # in the 'proto' attribute, if you specify -1, all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
              # traffic on all ports is allowed, regardless of any ports you specify
              from_port: 10050 # this value is ignored
              to_port: 10050 # this value is ignored
              cidr_ip: 10.0.0.0/8
          rules_egress:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
              cidr_ipv6: 64:ff9b::/96
              group_name: example-other
              # description to use if example-other needs to be created
              group_desc: other example EC2 group
        - name: "group3"
          description: an example2 EC2 group
          vpc_id: 12345
          region: eu-west-1
          rules:
            # 'ports' rule keyword accepts a single port value or a list of values including ranges (from_port-to_port).
            - proto: tcp
              ports: 22
              group_name: example-vpn
            - proto: tcp
              ports:
                - 80
                - 443
                - 8080-8099
              cidr_ip: 0.0.0.0/0
            # Rule sources allows to define multiple sources per source type as well as multiple source types per rule.
            - proto: tcp
              ports:
                - 6379
                - 26379
              group_name:
                - example-vpn
                - example-redis
            - proto: tcp
              ports: 5665
              group_name: example-vpn
              cidr_ip:
                - 172.16.1.0/24
                - 172.16.17.0/24
              cidr_ipv6:
                - 2607:F8B0::/32
                - 64:ff9b::/96
              group_id:
                - sg-edcd9784
  cdn_service:
    base_dir: "ext-cloud"
    namespace: "ext_cdn"
    task: "tasks/cdn/aws/aws.main.cdn.yml"
    schema: "tasks/cdn/aws/aws.schema.cdn.yml"
    validator: "tasks/cdn/aws/aws.validator.cdn.yml"
    credentials:
      cdn: "aws"
    params:
      list:
        - name: test-service1
          aliases: [ 'www.my-distribution-source.com', 'zzz.aaa.io' ]
        - name: test-service2
          comment: modified by ansible cloudfront.py
          tags:
            Name: example distribution
            Project: example project
            Priority: '1'
          purge_tags: yes
        - name: test-service3
          origins:
              - id: 'my test origin-000111'
                domain_name: www.example.com
                origin_path: /production
                custom_headers:
                  - header_name: MyCustomHeaderName
                    header_value: MyCustomHeaderValue
          default_cache_behavior:
            target_origin_id: 'my test origin-000111'
            forwarded_values:
              query_string: true
              cookies:
                forward: all
              headers:
              - '*'
              viewer_protocol_policy: allow-all
              smooth_streaming: true
              compress: true
              allowed_methods:
                items:
                  - GET
                  - HEAD
                cached_methods:
                  - GET
                  - HEAD
          logging:
            enabled: true
            include_cookies: false
            bucket: mylogbucket.s3.amazonaws.com
            prefix: myprefix/
          enabled: false
          comment: this is a CloudFront distribution with logging
        - name: test-service4
          absent: true
          comment: destroy this distribution
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  ext_cloud:
    src: "https://github.com/lucasbasquerotto/ext-cloud.git"
    version: "master"
credentials:
  aws:
    access_key: "{{ credentials.aws.access_key | default('') }}"
    secret_key: "{{ credentials.aws.secret_key | default('') }}"
