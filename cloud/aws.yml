name: "{{ project_name }}"
ctxs: "{{ project_ctxs }}"
original_env_schema: "{{ env.repo_dir }}/cloud/aws.schema.yml"
meta:
  template_no_empty_lines: true
cloud:
  repo: "cloud"
  ext_repos:
    - repo: "ext_cloud"
      dir: "ext-cloud"
  collections:
    - namespace: "lrd"
      collection: "ext_cloud"
      path: "ext-cloud/collection"
  hosts:
    type: "template"
    file: "files/hosts.tpl.ini"
    schema: "files/hosts.schema.yml"
main:
  cdn:
    extend_cloud: true
    initial_services:
      - name: "cdn_service"
        can_destroy: true
  db:
    extend_cloud: true
    initial_services:
      - name: "db_vpn_service"
        can_destroy: true
      - name: "db_service"
        can_destroy: true
  dns:
    extend_cloud: true
    initial_services:
      - name: "dns_service"
        can_destroy: true
  node:
    extend_cloud: true
    initial_services:
      - name: "node_vpn_service"
        can_destroy: true
    nodes:
      - name: "app"
        key: "aws_node"
        can_destroy: true
      - name: "app2"
        key: "aws_node"
        amount: 2
        max_amount: 3
        can_destroy: true
      - name: "app3"
        key: "aws_node"
        hostname: "myapp"
        amount: 3
        max_amount: 5
        can_destroy: true
  snapshot:
    extend_cloud: true
    initial_services:
      - name: "snapshot_service"
        can_destroy: true
  volume:
    extend_cloud: true
    initial_services:
      - name: "volume_service"
        can_destroy: true
  vpn:
    extend_cloud: true
    initial_services:
      - name: "vpn_service"
        can_destroy: true
  s3:
    extend_cloud: true
    initial_services:
      - name: "s3_buckets"
        can_destroy: true
services:
  cdn_service:
    base_dir: "ext-cloud"
    namespace: "ext_cdn"
    task: "tasks/cdn/aws/aws.main.cdn.yml"
    schema: "tasks/cdn/aws/aws.schema.cdn.yml"
    validator: "tasks/cdn/aws/aws.validator.cdn.yml"
    credentials:
      cdn: "aws"
    params:
      list:
        - name: test-service1
          origins:
            - id: "test-1"
              domain_name: www.my-cloudfront-origin-1.com
        - name: test-service2
          comment: modified by ansible (cloudfront module)
          origins:
            - id: "test-2-1"
              domain_name: www.my-cloudfront-origin-2-1.com
            - id: "test-2-2"
              domain_name: www.my-cloudfront-origin-2-2.com
          tags:
            Name: example distribution
            Project: example project
            Priority: "1"
          purge_tags: yes
        - name: test-service3
          origins:
            - id: "my test origin-000111"
              domain_name: www.example.com
              origin_path: /production
              custom_headers:
                - header_name: MyCustomHeaderName
                  header_value: MyCustomHeaderValue
          default_cache_behavior:
            target_origin_id: "my test origin-000111"
            forwarded_values:
              query_string: true
              cookies:
                forward: all
              headers:
                - "*"
            viewer_protocol_policy: allow-all
            smooth_streaming: true
            compress: true
            allowed_methods:
              items:
                - GET
                - HEAD
              cached_methods:
                - GET
                - HEAD
          enabled: false
          comment: this is another example of a CloudFront distribution
        - name: test-service4
          absent: true
          comment: destroy this distribution
  db_vpn_service:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/aws/aws.main.vpn.yml"
    schema: "tasks/vpn/aws/aws.schema.vpn.yml"
    validator: "tasks/vpn/aws/aws.validator.vpn.yml"
    credentials:
      vpn: "aws"
    params:
      vpc:
        name: "db-test-vpc"
        region: "us-east-1"
        cidr_block: "10.12.0.0/16"
        public_vpc: true
        subnets:
          - name: "db-test-subnet-01"
            cidr: "10.12.1.0/24"
            az: "us-east-1a"
          - name: "db-test-subnet-02"
            cidr: "10.12.2.0/24"
            az: "us-east-1b"
          - name: "db-test-subnet-03"
            cidr: "10.12.3.0/24"
            az: "us-east-1c"
      security_groups:
        - name: "db-test-group-01"
          description: "allow SSH access"
          region: "us-east-1"
          rules:
            - proto: tcp
              ports: [22]
              cidr_ip: 0.0.0.0/0
              rule_desc: "allow all on port 22"
        - name: "db-test-group-02"
          description: "allow web access"
          region: "us-east-1"
          rules:
            - proto: tcp
              ports: [80, 443]
              cidr_ip: 0.0.0.0/0
              rule_desc: "allow all on ports 80 and 443"
  db_service:
    base_dir: "ext-cloud"
    namespace: "ext_db"
    task: "tasks/db/aws/aws.main.db.yml"
    schema: "tasks/db/aws/aws.schema.db.yml"
    validator: "tasks/db/aws/aws.validator.db.yml"
    credentials:
      db: "aws_rds"
    params:
      region: "us-east-1"
      list:
        - name: ansible-test-aurora-db-instance
          cluster: ansible-test-cluster
          own_cluster: true
          engine: aurora
          instance_type: db.t2.small
          master_username: "user1"
          skip_final_snapshot: true
        - name: test-encrypted-db
          engine: mariadb
          storage_encrypted: true
          instance_type: db.t2.medium
          master_username: "user2"
          allocated_storage: 15
          skip_final_snapshot: true
          # final_snapshot_identifier: "test-encrypted-db-snapshot"
        - name: ansible-test-aurora-db-instance-2
          absent: true
          skip_final_snapshot: true
        - name: test-encrypted-db-2
          force_state: terminated
          storage_encrypted: true
        - name: test-db-subnet-group
          engine: mariadb
          instance_type: db.t2.medium
          master_username: "user3"
          allocated_storage: 10
          vpc_name: "db-test-vpc"
          subnets:
            - "db-test-subnet-01"
            - "db-test-subnet-02"
          security_groups:
            - "db-test-group-01"
            - "db-test-group-02"
          skip_final_snapshot: true
  dns_service:
    base_dir: "ext-cloud"
    namespace: "ext_dns"
    task: "tasks/dns/aws/aws.main.dns.yml"
    schema: "tasks/dns/aws/aws.schema.dns.yml"
    validator: "tasks/dns/aws/aws.validator.dns.yml"
    credentials:
      dns: "aws"
    params:
      list:
        - zone: "{{ params.domain | default('') }}"
          dns_type: "A"
          record: "dev1"
          value: ["1.1.1.1"]
        - zone: "{{ params.domain | default('') }}"
          dns_type: "A"
          record: "dev2"
          value: ["2.2.2.2", "2.4.2.4"]
        - zone: "{{ params.domain | default('') }}"
          dns_type: "AAAA"
          record: "dev3"
          value: ["2001:db8::ff00:42:8329"]
  snapshot_service:
    base_dir: "ext-cloud"
    namespace: "ext_snapshot"
    task: "tasks/snapshot/aws/aws.main.snapshot.yml"
    schema: "tasks/snapshot/aws/aws.schema.snapshot.yml"
    validator: "tasks/snapshot/aws/aws.validator.snapshot.yml"
    credentials:
      snapshot: "aws"
    params:
      list:
        - name: "aws-snap-01"
          resource_name: "aws-vol-01"
          resource_type: "volume"
          region: "us-east-1"
          description: test snapshot of aws-vol-01
          snapshot_tags:
            source: vol-01
        - name: "aws-snap-02"
          resource_name: "aws-vol-02"
          resource_type: "volume"
          region: "us-east-1"
          description: hourly snapshot of aws-vol-02
          last_snapshot_min_age: 60
          snapshot_tags:
            frequency: hourly
            source: vol-02
        - name: "aws-snap-03"
          resource_name: "app-host"
          resource_type: "instance"
          device_name: "/dev/sda1"
          region: "us-east-1"
          description: test snapshot of app-host
          snapshot_tags:
            source: app
        - name: "aws-snap-04"
          resource_name: "app2-host-2"
          resource_type: "instance"
          device_name: "/dev/sda1"
          region: "us-east-1"
          description: hourly snapshot of app2-host-2
          last_snapshot_min_age: 60
          snapshot_tags:
            frequency: hourly
            source: app2
        - name: "aws-snap-05"
          resource_name: "myapp-3"
          resource_type: "instance"
          device_name: "/dev/sda1"
          region: "us-east-1"
          description: test snapshot of myapp-3
          snapshot_tags:
            source: app3
  volume_service:
    base_dir: "ext-cloud"
    namespace: "ext_volume"
    task: "tasks/volume/aws/aws.main.volume.yml"
    schema: "tasks/volume/aws/aws.schema.volume.yml"
    validator: "tasks/volume/aws/aws.validator.volume.yml"
    credentials:
      volume: "aws"
    params:
      list:
        - name: "aws-vol-01"
          region: "us-east-1"
          zone: "us-east-1a"
          volume_size: "15"
        - name: "aws-vol-02"
          region: "us-east-1"
          zone: "us-east-1b"
          device_name: "/dev/sdf"
          volume_size: "20"
          volume_type: "gp2"
  vpn_service:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/aws/aws.main.vpn.yml"
    schema: "tasks/vpn/aws/aws.schema.vpn.yml"
    validator: "tasks/vpn/aws/aws.validator.vpn.yml"
    credentials:
      vpn: "aws"
    params:
      vpc:
        name: "aws-vpc"
        region: "us-east-1"
        cidr_block: "10.11.0.0/16"
        public_vpc: true
        subnets:
          - name: "aws-vpc-subnet"
            cidr: "10.11.0.0/28"
      security_groups:
        - name: "group1"
          description: "sg with rule description"
          region: "us-east-1"
          rules:
            - proto: tcp
              ports:
                - 80
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 80
        - name: "group2"
          description: "an example EC2 group"
          region: "us-east-1"
          rules:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 10.0.0.0/8
            - proto: udp
              from_port: 10050
              to_port: 10050
              cidr_ip: 10.0.0.0/8
            - proto: icmp
              from_port: 8 # icmp type, -1 = any type
              to_port: -1 # icmp subtype, -1 = any subtype
              cidr_ip: 10.0.0.0/8
            - proto: all
              # in the 'proto' attribute, if you specify -1, all, or a protocol number other than tcp, udp, icmp, or 58 (ICMPv6),
              # traffic on all ports is allowed, regardless of any ports you specify
              from_port: 10050 # this value is ignored
              to_port: 10050 # this value is ignored
              cidr_ip: 10.0.0.0/8
          rules_egress:
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
              cidr_ipv6: 64:ff9b::/96
              # description to use if example-other needs to be created
              group_desc: "example EC2 group desc"
  node_vpn_service:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/aws/aws.main.vpn.yml"
    schema: "tasks/vpn/aws/aws.schema.vpn.yml"
    validator: "tasks/vpn/aws/aws.validator.vpn.yml"
    credentials:
      vpn: "aws"
    params:
      security_groups:
        - name: "allow-ssh"
          description: "allow SSH access"
          region: "us-east-1"
          rules:
            - proto: tcp
              ports: [22]
              cidr_ip: 0.0.0.0/0
              rule_desc: allow all on port 22
  node_service:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/aws/aws.main.node.yml"
    schema: "tasks/node/aws/aws.schema.node.yml"
    validator: "tasks/node/aws/aws.validator.node.yml"
    credentials:
      node: "aws"
    params:
      instance_type: "t3.micro"
      region: "us-east-1"
      image_id: "ami-0070c5311b7677678"
      network:
        assign_public_ip: true
      security_groups: ["allow-ssh"]
      instance_initiated_shutdown_behavior: "terminate"
      termination_protection: false
      volumes:
        - device_name: "/dev/sda1"
          ebs:
            volume_size: 22
            delete_on_termination: true
      wait_timeout: 300
      detailed_monitoring: false
      ebs_optimized: false
    contents:
      user_data:
        type: "template"
        origin: "cloud"
        file: "ext-cloud/files/user-data/ubuntu-18.04.tpl.sh"
        schema: "ext-cloud/files/user-data/ubuntu-18.04.schema.yml"
        params:
          user_directories: ["/var/cloud"]
          install_docker: true
          install_podman: false
          install_node_exporter: false
          install_packages: true
        credentials:
          node: "host"
        contents:
          host_ssh_public_keys: "{{ params.host_ssh_public_keys_content | default('') }}"
  s3_buckets:
    base_dir: "ext-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    validator: "tasks/s3/validator.s3.yml"
    credentials:
      s3: "s3"
    params:
      list:
        - bucket: "lrd-bucket-private"
          permission: "private"
        - bucket: "lrd-bucket-public-read"
          permission: "public-read"
nodes:
  aws_node:
    service: "node_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      host_users:
        - name: "host"
          setup_log_file: "/var/log/setup.log"
          setup_finished_log_regex: "^Setup Finished.*$"
          setup_success_log_last_line: "Setup Finished - Success"
          initial_connection_timeout: 90
          setup_finished_timeout: 300
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  ext_cloud:
    src: "https://github.com/lucasbasquerotto/ext-cloud.git"
    version: "master"
credentials:
  host:
    host_user: "{{ credentials.host.host_user | default('') }}"
    host_pass: "{{ credentials.host.host_pass | default('') }}"
    ssh_file: "{{ credentials.host.ssh_file | default('') }}"
  aws:
    access_key: "{{ credentials.aws.access_key | default('') }}"
    secret_key: "{{ credentials.aws.secret_key | default('') }}"
  aws_rds:
    access_key: "{{ credentials.aws.access_key | default('') }}"
    secret_key: "{{ credentials.aws.secret_key | default('') }}"
    master_user_password: "RD$-p4ss"
  s3:
    endpoint: "https://s3.us-east-1.amazonaws.com"
    access_key: "{{ credentials.aws.access_key | default('') }}"
    secret_key: "{{ credentials.aws.secret_key | default('') }}"
