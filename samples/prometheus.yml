name: "{{ params.name }}"
migration: "20201023"
container: "lucasbasquerotto/cloud:1.3.0"
main:
  cloud:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    clouds:
      - "{{ params.env_params.cloud_name }}"
    params:
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host]
      meta:
        template_no_empty_lines: true
  local:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    clouds:
      - "local"
    nodes:
      - name: "app"
        key: "prometheus_local"
    local:
      pods:
        - "prometheus"
    params:
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host]
      meta:
        template_no_empty_lines: true
  remote:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    destroy:
      nodes: true
      buckets: true
    clouds:
      - "{{ params.env_params.cloud_name }}"
    buckets:
      - "prometheus_backup"
    nodes:
      - name: "app"
        key: "prometheus"
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            nodes_tasks: true
          - name: "main_build"
            all_nodes: true
            pods_tasks: true
          - name: "main_upgrade"
            all_nodes: true
            pods_tasks: true
    params:
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host:children]
        app
        [app]
  remote_local_test:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    clouds:
      - "local"
    nodes:
      - name: "app"
        key: "prometheus_local"
    local:
      pods:
        - "prometheus"
    params:
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host]
      meta:
        template_no_empty_lines: true
  nodes:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    destroy:
      nodes: true
      buckets: true
    clouds:
      - "{{ params.env_params.cloud_name }}"
    buckets:
      - "prometheus_backup"
    nodes:
      - name: "db"
        key: "prometheus"
        pods:
          prometheus:
            params:
              type: "db"
              use_nginx: false
            group_params:
              custom_memory: "prometheus_custom_memory_db"
      - name: "web"
        key: "prometheus"
        dependencies:
          - host: "prometheus"
            node: "db"
        pods:
          prometheus:
            params:
              type: "web"
            group_params:
              custom_memory: "prometheus_custom_memory_web"
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            nodes_tasks: true
          - name: "main_build"
            all_nodes: true
            pods_tasks: true
          - name: "main_upgrade"
            nodes: ["db"]
            pods_tasks: true
      - tasks:
          - name: "main_upgrade"
            nodes: ["web"]
            pods_tasks: true
    params:
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host:children]
        db
        web
        [db]
        [web]
clouds:
  local:
    type: "local"
  digital_ocean:
    type: "digital_ocean"
    credentials: "digital_ocean"
    params:
      x_digital_ocean_tags:
        - "auto"
        - "dmz"
      x_digital_ocean_firewalls:
        - name: "private"
          tags: ["auto"]
          inbound_rules:
            - ports: "9080"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
            - ports: "9443"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "dmz"
          tags: ["dmz"]
          inbound_rules:
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
dns:
  cloudflare:
    type: "cloudflare"
    zone: "{{ params.env_params.domain }}"
    credentials: "cloudflare"
  godaddy:
    type: "godaddy"
    zone: "{{ params.env_params.domain }}"
    credentials: "godaddy"
buckets:
  prometheus_backup:
    name: "{{ params.env_params.backup_bucket_name }}"
    credentials: "backup_bucket"
nodes:
  prometheus_local:
    cloud: "local"
    base_dir: "/var/cloud"
    credentials: "user"
    pods:
      - name: "prometheus"
        params:
          local: true
          named_volumes: "{{ params.env_params.named_volumes | default(false) }}"
          custom_ssl: "{{ params.env_params.local_custom_ssl | default({}) }}"
        group_params:
          custom_args: "prometheus_custom_args"
          custom_domain: "prometheus_custom_domain_local"
          certbot: "certbot_local"
          db_backup: "db_backup_no_sync"
    params:
      size:
        memory: "2gb"
        cpu: 2
  prometheus:
    cloud: "{{ params.env_params.cloud_name }}"
    base_dir: "/var/cloud"
    credentials: "host"
    pods:
      - name: "prometheus"
        params:
          local: false
        group_params:
          custom_args: "prometheus_custom_args"
          custom_domain: "prometheus_custom_domain"
    params:
      dns:
        - record: "{{ params.env_params.grafana_dns_record }}"
          name: "{{ params.env_params.grafana_dns_name }}"
        - record: "{{ params.env_params.theia_dns_record }}"
          name: "{{ params.env_params.theia_dns_name }}"
          when: "{{ params.env_params.use_theia }}"
        - record: "{{ params.env_params.minio_gateway_dns_record }}"
          name: "{{ params.env_params.minio_gateway_dns_name }}"
          when: "{{ params.env_params.use_minio_gateway }}"
        - record: "{{ params.env_params.filestash_dns_record }}"
          name: "{{ params.env_params.filestash_dns_name }}"
          when: "{{ params.env_params.use_filestash }}"
      cron:
        - user: "root"
          src_file: "{{ params.env.repo_dir }}/cron/app.cron"
          dest_dir: "/var/spool/cron/crontabs"
      instance:
        image: "ubuntu-18-04-x64"
        user_data_file: "{{ params.env.repo_dir }}/templates/ubuntu-18.04.j2.sh"
        ipv6: "yes"
      region:
        name: "ams3"
        region: "ams"
        zone: "3"
      size:
        name: "s-2vcpu-2gb"
        memory: "2gb"
        cpu: 2
      host_test:
        log_file: "/var/log/setup.log"
        setup_last_line: "Setup Finished"
        initial_connection_timeout: 90
        setup_finished_timeout: 300
      x_digital_ocean_tags:
        - "auto"
        - "dmz"
pods:
  prometheus:
    repo: "pod"
    root: "yes"
    ctx: "custom-pod/prometheus/ctx.yml"
    fast_prepare: "true"
    env_repos:
      - repo: "custom_pod"
        dir: "custom-pod"
    credentials:
      grafana: "grafana"
      minio_gateway: "minio_gateway"
      backup_bucket: "backup_bucket"
      backup_replica_bucket: "backup_replica_bucket"
    params:
      type: "app"
      orchestration: "docker_compose"
      custom_dir: "custom-pod"
      custom_dir_sync: "{{ params.env_params.pod_custom_dir_sync | default(false) }}"
      use_pod_prefix: "{{ params.env_params.use_pod_prefix | default(false) }}"
      use_pod_full_prefix: "{{ params.env_params.use_pod_full_prefix | default(false) }}"
      use_node_exporter: "{{ params.env_params.use_node_exporter }}"
      use_cadvisor: "{{ params.env_params.use_cadvisor }}"
      use_nginx: "{{ params.env_params.use_nginx | default(true) }}"
      use_theia: "{{ params.env_params.use_theia }}"
      use_minio_gateway: "{{ params.env_params.use_minio_gateway }}"
      use_filestash: "{{ params.env_params.use_filestash }}"
      use_fluentd: "{{ params.env_params.use_fluentd }}"
      use_certbot: "{{ params.env_params.use_certbot }}"
      auth_file: "{{ params.env_params.auth_file }}"
      auth_file_encrypted: "{{ params.env_params.auth_file_encrypted | default(false) }}"
      s3_cli: "{{ params.env_params.s3_cli }}"
      backup_bucket_name: "{{ params.env_params.backup_bucket_name }}"
      backup_bucket_path: "{{ params.env_params.backup_bucket_path | default('') }}"
      backup_replica_bucket_name: "{{ params.env_params.backup_replica_bucket_name }}"
      backup_replica_bucket_path: "{{ params.env_params.backup_replica_bucket_path | default('') }}"
      restore_db: "{{ params.env_params.restore_db }}"
      enable_db_backup: true
      enable_db_setup: true
      enable_logs_backup: true
      enable_logs_setup: true
      enable_sync_backup: true
      enable_sync_setup: true
      enable_backup_replica: true
    group_params:
      custom_images: "prometheus_custom_images"
      custom_memory: "prometheus_custom_memory_app"
      db_setup: >-
        {{
        params.env_params.non_s3_setup | default(false) | bool |
        ternary('db_setup_restore_file', 'db_setup_restore_s3')
        }}
      db_backup: "db_backup_sync"
      certbot: "certbot"
pod_params:
  prometheus_custom_args:
    nginx:
      enable_validate_origin: true
    fluentd:
      port: "24224"
    prometheus:
      port: "9090"
    grafana:
      port: "3000"
  prometheus_custom_domain:
    public_http_port: "80"
    public_https_port: "443"
    private_http_port: "9080"
    private_https_port: "9443"
    main_domain: "{{ params.env_params.grafana_full_domain }}"
    grafana_domain: "{{ params.env_params.grafana_full_domain }}"
    grafana_ssl: "{{ params.env_params.ssl }}"
    prometheus_domain: "{{ params.env_params.prometheus_full_domain }}"
    prometheus_ssl: "{{ params.env_params.ssl }}"
    theia_domain: "{{ params.env_params.theia_full_domain }}"
    theia_ssl: "{{ params.env_params.ssl }}"
    minio_gateway_domain: "{{ params.env_params.minio_gateway_full_domain }}"
    minio_gateway_ssl: "{{ params.env_params.ssl }}"
    filestash_domain: "{{ params.env_params.filestash_full_domain }}"
    filestash_ssl: "{{ params.env_params.ssl }}"
  prometheus_custom_domain_local:
    public_http_port: "8080"
    public_https_port: "8443"
    private_http_port: "9080"
    private_https_port: "9443"
    main_domain: "localhost"
    grafana_domain: "localhost"
    grafana_ssl: "{{ params.env_params.ssl }}"
    prometheus_domain: "prometheus.localhost"
    prometheus_ssl: "{{ params.env_params.ssl }}"
    theia_domain: "theia.localhost"
    theia_ssl: "{{ params.env_params.ssl }}"
    minio_gateway_domain: "minio.localhost"
    minio_gateway_ssl: "{{ params.env_params.ssl }}"
    filestash_domain: "filestash.localhost"
    filestash_ssl: "{{ params.env_params.ssl }}"
  prometheus_custom_images:
    nginx_image: "nginx"
    nginx_version: "1.14.2-alpine"
    prometheus_image: "prom/prometheus"
    prometheus_version: "v2.20.1"
    grafana_image: "grafana/grafana"
    grafana_version: "7.1.5"
    node_exporter_image: "prom/node-exporter"
    node_exporter_version: "v1.0.1"
    cadvisor_image: "google/cadvisor"
    cadvisor_version: "v0.33.0"
    theia_image: "theiaide/theia"
    theia_version: "1.3.0"
    minio_gateway_image: "minio/minio"
    minio_gateway_version: "RELEASE.2020-07-02T00-15-09Z"
    filestash_image: "machines/filestash"
    filestash_version: "4cbeb2c"
    toolbox_image: "lucasbasquerotto/image"
    toolbox_version: "toolbox-20200715-02"
    certbot_image: "certbot/certbot"
    certbot_version: "v1.2.0"
    awscli_image: "lucasbasquerotto/aws-cli"
    awscli_version: "1.0.0"
    logrotator_image: "python"
    logrotator_version: "3.8.4-buster"
    fluentd_image: "lucasbasquerotto/image"
    fluentd_version: "fluentd-20200617"
  prometheus_custom_memory_app:
    nginx: 512mb
    grafana: 512mb
    prometheus: 1gb
    node_exporter: 512mb
    cadvisor: 512mb
    theia: 512mb
    minio_gateway: 512mb
    filestash: 512mb
    toolbox: 512mb
    certbot: 256mb
    s3_cli: 512mb
    fluentd: 256mb
  prometheus_custom_memory_db:
    prometheus: 1gb
    node_exporter: 512mb
    cadvisor: 512mb
    toolbox: 512mb
    s3_cli: 512mb
    fluentd: 256mb
  prometheus_custom_memory_web:
    nginx: 512mb
    grafana: 512mb
    node_exporter: 512mb
    cadvisor: 512mb
    theia: 512mb
    minio_gateway: 512mb
    filestash: 512mb
    toolbox: 512mb
    certbot: 256mb
    s3_cli: 512mb
    fluentd: 256mb
  certbot:
    main_domain: "{{ params.env_params.grafana_full_domain }}"
    domains: "{{ params.env_params.certbot_domains }}"
    email: "{{ params.env_params.certbot_email | default('') }}"
    staging: "{{ params.env_params.certbot_staging | default(false) }}"
    force: "{{ params.env_params.certbot_force | default(false) }}"
  certbot_local:
    main_domain: "localhost"
    domains: "localhost www.localhost"
    email: "{{ params.env_params.certbot_email | default('') }}"
    force: "{{ params.env_params.certbot_force | default(false) }}"
  db_backup_sync:
    backup_bucket_sync_dir: "db"
  db_backup_no_sync:
    is_compressed_file: true
  db_setup_restore_file:
    restore_use_s3: false
    restore_remote_file: "https://github.com/lucasbasquerotto/backups/blob/master/prometheus/db/20200624_214700.zip?raw=true"
    is_compressed_file: true
  db_setup_restore_s3:
    restore_use_s3: true
    restore_s3_sync: true
    restore_remote_bucket_path_dir: "db"
tasks:
  docker_compose_install:
    type: "task"
    root: true
    file: "docker.yml"
    compose_params:
      version: "1.27.2"
      remote: true
  main_build:
    type: "shell"
    root: true
    cmd: "./run build"
  main_upgrade:
    type: "shell"
    root: true
    cmd: "./run upgrade"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/ansible-docker.git"
    version: "master"
  custom_cloud:
    src: "https://github.com/lucasbasquerotto/custom-cloud.git"
    version: "master"
  pod:
    src: "https://github.com/lucasbasquerotto/pod.git"
    version: "master"
  custom_pod:
    src: "https://github.com/lucasbasquerotto/custom-pod.git"
    version: "master"
credentials: "{{ params.credentials }}"
