name: "{{ params.name }}"
ctxs: "{{ params.ctxs }}"
main:
  remote:
    destroy:
      nodes: true
    clouds:
    - "{{ params.env_params.cloud_name }}"
    nodes:
    - name: "ctl"
      key: "remote"
    run_stages:
    - tasks:
      - name: "docker_compose_install"
        all_nodes: true
        nodes_tasks: true
      - name: "main_build"
        all_nodes: true
        pods_tasks: true
    params:
      entrypoint: "main.yml"
      entrypoint_template_src: "main.tpl.yml"
      repo: "cloud"
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host:children]
        ctl
        [ctl]
  external:
    destroy:
      nodes: true
    clouds:
    - "{{ params.env_params.cloud_name }}"
    nodes:
    - name: "ctl"
      key: "remote"
      external: true
      pod_params:
        main:
          test: true
    dependencies:
    - host: "main-domain-test"
      node: "ctl"
    - host: "main-domain-test-new"
      node: "ctl"
    run_stages:
    - tasks:
      - name: "docker_compose_install"
        all_nodes: true
        nodes_tasks: true
      - name: "main_build"
        all_nodes: true
        pods_tasks: true
    params:
      entrypoint: "main.yml"
      entrypoint_template_src: "main.tpl.yml"
      repo: "cloud"
      hosts_file: "files/main/external.hosts"
  local:
    clouds:
    - "local"
    nodes:
    - name: "ctl"
      key: "local"
    local:
      pods:
      - "main"
    params:
      entrypoint: "main.yml"
      entrypoint_template_src: "main.tpl.yml"
      repo: "cloud"
      hosts_content: |
        [main]
        localhost ansible_connection=local
        [host]
clouds:
  digital_ocean:
    type: "digital_ocean"
    credentials: "digital_ocean"
    params:
      x_digital_ocean_tags:
      - "main"
      x_digital_ocean_firewalls:
      - name: "main"
        tags: ["main"]
        inbound_rules:
        - ports: "22"
          sources:
            addresses: ["0.0.0.0/0", "::/0"]
        outbound_rules:
        - protocol: "tcp"
          ports: "1-65535"
          destinations:
            addresses: ["0.0.0.0/0", "::/0"]
        - protocol: "udp"
          ports: "1-65535"
          destinations:
            addresses: ["0.0.0.0/0", "::/0"]
        - protocol: "icmp"
          ports: "1-65535"
          destinations:
            addresses: ["0.0.0.0/0", "::/0"]
  local:
    type: "local"
nodes:
  remote:
    cloud: "{{ params.env_params.cloud_name }}"
    base_dir: "/var/cloud"
    credentials: "node"
    pods: ["main"]
    shared_params: ["do_ubuntu_remote"]
  local:
    cloud: "local"
    base_dir: "/var/cloud"
    credentials: "node"
    pods: ["main"]
    shared_params: ["local"]
node_shared_params:
  local:
    size:
      memory: "1gb"
      cpu: 1
    cron:
    - user: "root"
      src_file: "{{ params.env.repo_dir }}/cron/main.cron"
      dest_dir: "/var/spool/cron/crontabs"
  do_ubuntu_remote:
    instance:
      image: "ubuntu-18-04-x64"
      user_data_file: "{{ params.env.repo_dir }}/templates/ubuntu-18.04.j2.sh"
      ipv6: "yes"
    region:
      name: "ams3"
      region: "ams"
      zone: "3"
    size:
      name: "s-1vcpu-1gb"
      memory: "1gb"
      cpu: 1
    host_test:
      log_file: "/var/log/setup.log"
      setup_last_line: "Setup Finished"
      initial_connection_timeout: 90
      setup_finished_timeout: 300
    x_digital_ocean_tags: ["main"]
pods:
  main:
    repo: "main"
    root: "yes"
    ctx: "ctx.yml"
    fast_prepare: "true"
    env_repos:
    - repo: "main_env"
      dir: "env-main"
    credentials:
      vault: "vault"
tasks:
  skip:
    type: "skip"
  docker_compose_install:
    type: "task"
    root: "true"
    file: "docker.yml"
    compose_params:
      version: "1.27.2"
      remote: true
  main_build:
    type: "task"
    root: "true"
    file: "docker-compose.build.yml"
  main_wait:
    type: "shell"
    root: "true"
    cmd: "sleep {{ params.env_params.wait | default('60') }}"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  main:
    src: "https://github.com/lucasbasquerotto/ansible-manager"
    version: "master"
  main_env:
    src: "ssh://git@bitbucket.org/lucasbasquerotto/ansible-main-env-demo.git"
    version: "master"
    private: true
    key_file_encrypted: "ssh/env_main.encrypted.key"
credentials:
  node: "{{ params.credentials.node | default({}) }}"
  vault: "{{ params.credentials.vault | default({}) }}"
  digital_ocean: "{{ params.credentials.digital_ocean | default({}) }}"
