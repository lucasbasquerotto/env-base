name: "{{ params.name }}"
ctxs: "{{ params.ctxs }}"
migration: ""
container: ""
meta:
  template_no_empty_lines: true
main:
  cloud:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    hosts: |
      [main]
      localhost ansible_connection=local
      [host]
    initial_services:
      - "{{ params.env_params.vpn_service }}"
  local:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    hosts: |
      [main]
      localhost ansible_connection=local
      [host]
    nodes:
      - name: "app"
        key: "prometheus_local"
        local: true
  remote:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    hosts: |
      [main]
      localhost ansible_connection=local
      [host:children]
      app
      [app]
    initial_services:
      - "{{ params.env_params.vpn_service }}"
      - "s3_buckets"
    nodes:
      - name: "app"
        key: "prometheus"
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_upgrade"
            all_nodes: true
            task_target: "pod"
  nodes:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    hosts: |
      [main]
      localhost ansible_connection=local
      [host:children]
      db
      web
      [db]
      [web]
    initial_services:
      - "{{ params.env_params.vpn_service }}"
      - "s3_buckets"
    nodes:
      - name: "db"
        key: "prometheus"
        pods:
          prometheus:
            params:
              type: "db"
              use_nginx: false
            group_params:
              custom_memory: "prometheus_custom_memory_db"
      - name: "web"
        key: "prometheus"
        dependencies:
          - host: "prometheus"
            node: "db"
        pods:
          prometheus:
            params:
              type: "web"
            group_params:
              custom_memory: "prometheus_custom_memory_web"
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_build"
            all_nodes: true
            task_target: "pod"
          - name: "main_upgrade"
            nodes: ["db"]
            task_target: "pod"
      - tasks:
          - name: "main_upgrade"
            nodes: ["web"]
            task_target: "pod"
services:
  s3_buckets:
    list: true
    services:
      - name: "s3_backup"
        key: "s3_service_base"
        params:
          bucket: "{{ params.env_params.backup_bucket_name }}"
          permission: "private"
  s3_service_base:
    base_dir: "custom-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/aws.main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    credentials:
      s3: "s3"
  node_dns_service:
    base_dir: "custom-cloud"
    task: "tasks/dns/{{ params.env_params.dns_provider }}.main.dns.yml"
    namespace: "ext_dns"
    credentials:
      dns: "{{ params.env_params.dns_provider }}"
    params:
      zone: "{{ params.env_params.domain }}"
  digital_ocean_vpn:
    base_dir: "custom-cloud"
    task: "tasks/vpn/digital_ocean.main.vpn.yml"
    credentials:
      vpn: "digital_ocean"
    params:
      tags:
        - "auto"
        - "dmz"
      firewalls:
        - name: "private"
          tags: ["auto"]
          inbound_rules:
            - ports: "9080"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
            - ports: "9443"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "dmz"
          tags: ["dmz"]
          inbound_rules:
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
  digital_ocean_node:
    base_dir: "custom-cloud"
    namespace: "ext_node"
    task: "tasks/node/digital_ocean.main.node.yml"
    schema: "tasks/node/digital_ocean.schema.node.yml"
    credentials:
      node: "digital_ocean"
    params:
      image_id: "ubuntu-18-04-x64"
      ipv6: true
      region_id: "ams3"
      size_id: "s-2vcpu-2gb"
      tags:
        - "auto"
        - "dmz"
    contents:
      user_data:
        type: "template"
        origin: "cloud"
        file: "custom-cloud/files/user-data/ubuntu-18.04.tpl.sh"
        schema: "custom-cloud/files/user-data/ubuntu-18.04.schema.yml"
        params:
          install_docker: true
          install_podman: false
          install_packages: false
        credentials:
          node: "host"
        contents:
          host_ssh_public_keys:
            origin: "env"
            file: "{{ params.credentials.host.host_ssh_public_keys_path | default('') }}"
nodes:
  prometheus_local:
    credential: "user"
    pods:
      - name: "prometheus"
        params:
          local: true
          named_volumes: "{{ params.env_params.named_volumes | default(false) }}"
          custom_ssl: "{{ params.env_params.local_custom_ssl | default({}) }}"
        group_params:
          custom_args: "prometheus_custom_args"
          custom_domain: "prometheus_custom_domain_local"
          certbot: "certbot_local"
          db_backup: "db_backup_no_sync"
  prometheus:
    service: "{{ params.env_params.node_service }}"
    dns_service: "node_dns_service"
    base_dir: "/var/cloud"
    credential: "host"
    pods:
      - name: "prometheus"
        params:
          local: false
        group_params:
          custom_args: "prometheus_custom_args"
          custom_domain: "prometheus_custom_domain"
    params:
      dns_service_params_list: "{{ params.env_params.dns_service_params_list | default([]) }}"
      cron:
        - user: "root"
          src:
            origin: "env"
            file: "{{ params.env.repo_dir }}/cron/app.cron"
          dest: "/var/spool/cron/crontabs/root"
      host_test:
        setup_log_file: "/var/log/setup.log"
        setup_finished_log_regex: "^Setup Finished.*$"
        setup_success_log_last_line: "Setup Finished - Success"
        initial_connection_timeout: 90
        setup_finished_timeout: 300
pods:
  prometheus:
    repo: "pod"
    root: "yes"
    ctx: "custom-pod/prometheus/ctx.yml"
    fast_prepare: "true"
    env_repos:
      - repo: "custom_pod"
        dir: "custom-pod"
    credentials:
      grafana: "grafana"
      minio_gateway: "minio_gateway"
      backup_bucket: "s3"
      backup_replica_bucket: "s3_replica"
    params:
      type: "app"
      orchestration: "docker_compose"
      custom_dir: "custom-pod"
      custom_dir_sync: "{{ params.env_params.pod_custom_dir_sync | default(false) }}"
      use_pod_prefix: "{{ params.env_params.use_pod_prefix | default(false) }}"
      use_pod_full_prefix: "{{ params.env_params.use_pod_full_prefix | default(false) }}"
      use_node_exporter: "{{ params.env_params.use_node_exporter }}"
      use_cadvisor: "{{ params.env_params.use_cadvisor }}"
      use_nginx: "{{ params.env_params.use_nginx | default(true) }}"
      use_theia: "{{ params.env_params.use_theia }}"
      use_minio_gateway: "{{ params.env_params.use_minio_gateway }}"
      use_filestash: "{{ params.env_params.use_filestash }}"
      use_fluentd: "{{ params.env_params.use_fluentd }}"
      use_certbot: "{{ params.env_params.use_certbot }}"
      auth_file: "{{ params.env_params.auth_file }}"
      s3_cli: "{{ params.env_params.s3_cli }}"
      backup_bucket_name: "{{ params.env_params.backup_bucket_name }}"
      backup_bucket_path: "{{ params.env_params.backup_bucket_path | default('') }}"
      backup_replica_bucket_name: "{{ params.env_params.backup_replica_bucket_name }}"
      backup_replica_bucket_path: "{{ params.env_params.backup_replica_bucket_path | default('') }}"
      restore_db: "{{ params.env_params.restore_db }}"
      enable_db_backup: true
      enable_db_setup: true
      enable_logs_backup: true
      enable_logs_setup: true
      enable_sync_backup: true
      enable_sync_setup: true
      enable_backup_replica: "{{ params.env_params.enable_backup_replica | default(false) }}"
    group_params:
      custom_images: "prometheus_custom_images"
      custom_memory: "prometheus_custom_memory_app"
      db_setup: >-
        {{
        params.env_params.non_s3_setup | default(false) | bool |
        ternary('db_setup_restore_file', 'db_setup_restore_s3')
        }}
      db_backup: "db_backup_sync"
      certbot: "certbot"
pod_group_params:
  prometheus_custom_args:
    nginx:
      enable_validate_origin: true
    fluentd:
      port: "24224"
    prometheus:
      port: "9090"
    grafana:
      port: "3000"
  prometheus_custom_domain:
    public_http_port: "80"
    public_https_port: "443"
    private_http_port: "9080"
    private_https_port: "9443"
    main_domain: "{{ params.env_params.grafana_full_domain }}"
    grafana_domain: "{{ params.env_params.grafana_full_domain }}"
    grafana_ssl: "{{ params.env_params.ssl }}"
    prometheus_domain: "{{ params.env_params.prometheus_full_domain }}"
    prometheus_ssl: "{{ params.env_params.ssl }}"
    theia_domain: "{{ params.env_params.theia_full_domain }}"
    theia_ssl: "{{ params.env_params.ssl }}"
    minio_gateway_domain: "{{ params.env_params.minio_gateway_full_domain }}"
    minio_gateway_ssl: "{{ params.env_params.ssl }}"
    filestash_domain: "{{ params.env_params.filestash_full_domain }}"
    filestash_ssl: "{{ params.env_params.ssl }}"
  prometheus_custom_domain_local:
    public_http_port: "8080"
    public_https_port: "8443"
    private_http_port: "9080"
    private_https_port: "9443"
    main_domain: "localhost"
    grafana_domain: "localhost"
    grafana_ssl: "{{ params.env_params.ssl }}"
    prometheus_domain: "prometheus.localhost"
    prometheus_ssl: "{{ params.env_params.ssl }}"
    theia_domain: "theia.localhost"
    theia_ssl: "{{ params.env_params.ssl }}"
    minio_gateway_domain: "minio.localhost"
    minio_gateway_ssl: "{{ params.env_params.ssl }}"
    filestash_domain: "filestash.localhost"
    filestash_ssl: "{{ params.env_params.ssl }}"
  prometheus_custom_images:
    nginx_image: "nginx"
    nginx_version: "1.14.2-alpine"
    prometheus_image: "prom/prometheus"
    prometheus_version: "v2.20.1"
    grafana_image: "grafana/grafana"
    grafana_version: "7.1.5"
    node_exporter_image: "prom/node-exporter"
    node_exporter_version: "v1.0.1"
    cadvisor_image: "google/cadvisor"
    cadvisor_version: "v0.33.0"
    theia_image: "theiaide/theia"
    theia_version: "1.3.0"
    minio_gateway_image: "minio/minio"
    minio_gateway_version: "RELEASE.2020-07-02T00-15-09Z"
    filestash_image: "machines/filestash"
    filestash_version: "4cbeb2c"
    toolbox_image: "lucasbasquerotto/image"
    toolbox_version: "toolbox-20200715-02"
    certbot_image: "certbot/certbot"
    certbot_version: "v1.2.0"
    awscli_image: "lucasbasquerotto/aws-cli"
    awscli_version: "1.0.0"
    logrotator_image: "python"
    logrotator_version: "3.8.4-buster"
    fluentd_image: "lucasbasquerotto/image"
    fluentd_version: "fluentd-20200617"
  prometheus_custom_memory_app:
    nginx: 512mb
    grafana: 512mb
    prometheus: 1gb
    node_exporter: 512mb
    cadvisor: 512mb
    theia: 512mb
    minio_gateway: 512mb
    filestash: 512mb
    toolbox: 512mb
    certbot: 256mb
    s3_cli: 512mb
    fluentd: 256mb
  prometheus_custom_memory_db:
    prometheus: 1gb
    node_exporter: 512mb
    cadvisor: 512mb
    toolbox: 512mb
    s3_cli: 512mb
    fluentd: 256mb
  prometheus_custom_memory_web:
    nginx: 512mb
    grafana: 512mb
    node_exporter: 512mb
    cadvisor: 512mb
    theia: 512mb
    minio_gateway: 512mb
    filestash: 512mb
    toolbox: 512mb
    certbot: 256mb
    s3_cli: 512mb
    fluentd: 256mb
  certbot:
    main_domain: "{{ params.env_params.grafana_full_domain }}"
    domains: "{{ params.env_params.certbot_domains }}"
    email: "{{ params.env_params.certbot_email | default('') }}"
    staging: "{{ params.env_params.certbot_staging | default(false) }}"
    force: "{{ params.env_params.certbot_force | default(false) }}"
  certbot_local:
    main_domain: "localhost"
    domains: "localhost www.localhost"
    email: "{{ params.env_params.certbot_email | default('') }}"
    force: "{{ params.env_params.certbot_force | default(false) }}"
  db_backup_sync:
    backup_bucket_sync_dir: "db"
  db_backup_no_sync:
    is_compressed_file: true
  db_setup_restore_file:
    restore_use_s3: false
    restore_remote_file: "https://github.com/lucasbasquerotto/backups/blob/master/prometheus/db/20200624_214700.zip?raw=true"
    is_compressed_file: true
  db_setup_restore_s3:
    restore_use_s3: true
    restore_s3_sync: true
    restore_remote_bucket_path_dir: "db"
tasks:
  docker_compose_install:
    type: "task"
    root: true
    file: "custom-cloud/run-tasks/docker.yml"
    schema: "custom-cloud/run-tasks/docker.schema.yml"
    params:
      compose:
        version: "1.27.2"
  main_build:
    type: "shell"
    root: true
    cmd: "./run build"
  main_upgrade:
    type: "shell"
    root: true
    cmd: "./run upgrade"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  custom_cloud:
    src: "https://github.com/lucasbasquerotto/custom-cloud.git"
    version: "master"
  pod:
    src: "https://github.com/lucasbasquerotto/pod.git"
    version: "master"
  custom_pod:
    src: "https://github.com/lucasbasquerotto/custom-pod.git"
    version: "master"
credentials: "{{ params.credentials }}"
