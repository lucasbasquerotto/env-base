name: "{{ project_name }}"
ctxs: "{{ project_ctxs }}"
migration: ""
container: ""
meta:
  ignore_validators: false
  skip_local_node_preparation: false
  skip_local_pod_preparation: false
  template_no_empty_lines: true
cloud:
  repo: "cloud"
  ext_repos:
    - repo: "ext_cloud"
      dir: "ext-cloud"
  collections:
    - namespace: "lrd"
      collection: "ext_cloud"
      path: "ext-cloud/collection"
  hosts:
    type: "template"
    file: "files/hosts.tpl.ini"
    schema: "files/hosts.schema.yml"
main:
  cloud:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service | default('skip') }}"
  s3_replica_buckets:
    extend_cloud: true
    initial_services:
      - name: "s3_buckets"
        can_destroy: true
      - name: "s3_replica_buckets"
        can_destroy: true
  local:
    extend_cloud: true
    nodes:
      - name: "app"
        key: "rproxy_local"
        local: true
  local_hub:
    extend_cloud: true
    nodes:
      - name: "app"
        key: "rproxy_hub_local"
        local: true
  local_replicas:
    extend_cloud: true
    nodes:
      - name: "app"
        key: "rproxy_replicas_hub_local"
        local: true
        dependencies:
          replica:
            type: "url"
            host:
              - "http://rproxy_replica_1-main-nginx"
              - "http://rproxy_replica_2-main-nginx"
              - "http://rproxy_replica_3-main-nginx"
            limit: -1
            required_amount: 1
          replica_private:
            type: "url"
            host:
              - "http://rproxy_replica_1-main-nginx:9080"
              - "http://rproxy_replica_2-main-nginx:9080"
              - "http://rproxy_replica_3-main-nginx:9080"
            limit: -1
            required_amount: 1
      - name: "node_replica_1"
        key: "rproxy_replica_1_local"
      - name: "node_replica_2"
        key: "rproxy_replica_2_local"
      - name: "node_replica_3"
        key: "rproxy_replica_3_local"
  remote:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service | default('skip') }}"
      - name: "s3_buckets"
        can_destroy: true
    nodes:
      - name: "app"
        key: "rproxy"
        can_destroy: true
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_upgrade"
            all_nodes: true
            task_target: "pod"
  remote_hub:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service | default('skip') }}"
      - name: "s3_buckets"
        can_destroy: true
    nodes:
      - name: "app"
        key: "rproxy_hub"
        can_destroy: true
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_build"
            all_nodes: true
            task_target: "pod"
          - name: "main_upgrade"
            all_nodes: true
            task_target: "pod"
  remote_external_hub:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service | default('skip') }}"
      - name: "s3_buckets"
        can_destroy: true
    nodes:
      - name: "app"
        key: "rproxy_external_hub"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "rproxy-dmz"
        dependencies:
          rproxy_web_1:
            type: "node"
            node_ip_type: "ipv4"
            host: "web1"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(443, 80) }}"
          rproxy_web_1_private:
            type: "node"
            node_ip_type: "ipv4"
            host: "web1"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(9443, 9080) }}"
          rproxy_web_2:
            type: "node"
            node_ip_type: "ipv4"
            host: "web2"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(443, 80) }}"
          rproxy_web_2_private:
            type: "node"
            node_ip_type: "ipv4"
            host: "web2"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(9443, 9080) }}"
          rproxy_web_3:
            type: "node"
            node_ip_type: "ipv4"
            host: "web3"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(443, 80) }}"
          rproxy_web_3_private:
            type: "node"
            node_ip_type: "ipv4"
            host: "web3"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(9443, 9080) }}"
      - name: "web1"
        key: "rproxy_web"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "rproxy-web"
        pods:
          rproxy:
            shared_params: ["remote_web_1"]
      - name: "web2"
        key: "rproxy_web"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "rproxy-web"
        pods:
          rproxy:
            shared_params: ["remote_web_2"]
      - name: "web3"
        key: "rproxy_web"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "rproxy-web"
        pods:
          rproxy:
            shared_params: ["remote_web_3"]
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_build"
            all_nodes: true
            task_target: "pod"
          - name: "main_upgrade"
            nodes: ["app"]
            task_target: "pod"
      - tasks:
          - name: "main_upgrade"
            all_nodes: true
            task_target: "pod"
  remote_replicas:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service | default('skip') }}"
      - name: "s3_buckets"
        can_destroy: true
    nodes:
      - name: "app"
        key: "rproxy_external_hub"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "rproxy-dmz"
        pods:
          rproxy:
            shared_params:
              ["main_replicas_hub_{{ params.rproxy_type | default('nginx') }}"]
        dependencies:
          replica:
            type: "node"
            node_ip_type: "ipv4"
            host: "replica"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(443, 80) }}"
            limit: -1
            required_amount: 1
          replica_private:
            type: "node"
            node_ip_type: "ipv4"
            host: "replica"
            protocol: "{{ params.use_ssl_web | default(false) | bool | ternary('https', 'http') }}"
            port: "{{ params.use_ssl_web | default(false) | bool | ternary(9443, 9080) }}"
            limit: -1
            required_amount: 1
      - name: "replica"
        key: "rproxy_web"
        can_destroy: true
        amount: 3
        params:
          service_params:
            tags:
              - "auto"
              - "rproxy-web"
        pods:
          rproxy:
            shared_params: ["remote_replica"]
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_build"
            all_nodes: true
            task_target: "pod"
          - name: "main_upgrade"
            nodes: ["app"]
            task_target: "pod"
      - tasks:
          - name: "main_upgrade"
            all_nodes: true
            task_target: "pod"
services:
  skip:
    list: true
    services: []
  local_node:
    namespace: "ext_node"
    task: "tasks/services/node/local.main.node.yml"
    schema: "tasks/services/node/local.schema.node.yml"
  s3_buckets:
    base_dir: "ext-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    validator: "tasks/s3/validator.s3.yml"
    credentials:
      s3: "s3"
    params:
      list:
        - bucket: "{{ params.backup_bucket_name | default('') }}"
          permission: "private"
  s3_replica_buckets:
    base_dir: "ext-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    validator: "tasks/s3/validator.s3.yml"
    credentials:
      s3: "s3"
    params:
      list:
        - bucket: "{{ params.backup_replica_bucket_name | default('') }}"
          permission: "private"
        - bucket: "{{ params.uploads_replica_bucket_name | default('') }}"
          permission: "private"
  node_dns_service:
    base_dir: "ext-cloud"
    namespace: "ext_dns"
    task: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.main.dns.yml
    schema: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.schema.dns.yml
    validator: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.validator.dns.yml
    credentials:
      dns: "{{ params.dns_provider | default('') }}"
    params:
      zone: "{{ params.main_domain | default('') }}"
  digital_ocean_vpn:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/digital_ocean/digital_ocean.main.vpn.yml"
    schema: "tasks/vpn/digital_ocean/digital_ocean.schema.vpn.yml"
    validator: "tasks/vpn/digital_ocean/digital_ocean.validator.vpn.yml"
    credentials:
      vpn: "digital_ocean"
    params:
      tags:
        - "auto"
        - "rproxy-web"
        - "rproxy-dmz"
      firewalls:
        - name: "private"
          tags: ["auto"]
          inbound_rules:
            - ports: "9080"
              sources:
                addresses: "{{ params.private_ips | default([]) }}"
                tags: ["rproxy-dmz"]
            - ports: "9443"
              sources:
                addresses: "{{ params.private_ips | default([]) }}"
                tags: ["rproxy-dmz"]
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
                addresses: "{{ params.private_ips | default([]) }}"
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "rproxy-web"
          tags: ["rproxy-web"]
          inbound_rules:
            - ports: "80"
              sources:
                tags: ["rproxy-dmz"]
            - ports: "443"
              sources:
                tags: ["rproxy-dmz"]
        - name: "rproxy-dmz"
          tags: ["rproxy-dmz"]
          inbound_rules:
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
  digital_ocean_node:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/digital_ocean/digital_ocean.main.node.yml"
    schema: "tasks/node/digital_ocean/digital_ocean.schema.node.yml"
    validator: "tasks/node/digital_ocean/digital_ocean.validator.node.yml"
    credentials:
      node: "digital_ocean"
    params:
      image_id: "ubuntu-18-04-x64"
      ipv6: true
      region_id: "ams3"
      size_id: "s-2vcpu-2gb"
    contents:
      user_data:
        type: "env"
        name: "user_data_ubuntu"
  linode:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/linode/linode.main.node.yml"
    schema: "tasks/node/linode/linode.schema.node.yml"
    validator: "tasks/node/linode/linode.validator.node.yml"
    credentials:
      node: "linode"
    params:
      image: "linode/ubuntu18.04"
      region: "us-east"
      type: "g6-standard-1"
    contents:
      user_data:
        type: "env"
        name: "user_data_ubuntu"
nodes:
  rproxy_local:
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy"
        shared_params:
          - "main"
          - "main_{{ params.rproxy_type | default('nginx') }}"
          - "local"
  rproxy_hub_local:
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy_hub"
        key: "rproxy"
        shared_params:
          - "main"
          - "local"
          - "hub_item"
          - "main_hub_{{ params.rproxy_type | default('nginx') }}"
      - name: "rproxy_web_1"
        key: "rproxy"
        shared_params: ["local", "hub_item", "hub_web", "local_web_1"]
      - name: "rproxy_web_2"
        key: "rproxy"
        shared_params: ["local", "hub_item", "hub_web", "local_web_2"]
      - name: "rproxy_web_3"
        key: "rproxy"
        shared_params: ["local", "hub_item", "hub_web", "local_web_3"]
  rproxy_replicas_hub_local:
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy_replicas_hub"
        key: "rproxy"
        shared_params:
          - "main"
          - "local"
          - "hub_item"
          - "main_replicas_hub_{{ params.rproxy_type | default('nginx') }}"
  rproxy_replica_1_local:
    service: "local_node"
    base_dir: "/var/cloud"
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy_replica_1"
        key: "rproxy"
        shared_params: ["local", "hub_item", "hub_web", "local_replica"]
  rproxy_replica_2_local:
    service: "local_node"
    base_dir: "/var/cloud"
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy_replica_2"
        key: "rproxy"
        shared_params: ["local", "hub_item", "hub_web", "local_replica"]
  rproxy_replica_3_local:
    service: "local_node"
    base_dir: "/var/cloud"
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy_replica_3"
        key: "rproxy"
        shared_params: ["local", "hub_item", "hub_web", "local_replica"]
  rproxy:
    service:
      name: "{{ params.node_service | default('skip') }}"
      params:
        tags:
          - "auto"
          - "rproxy-dmz"
    dns_service: "node_dns_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
    shared_params: ["remote"]
    pods:
      - name: "rproxy"
        shared_params:
          - "main"
          - "main_{{ params.rproxy_type | default('nginx') }}"
  rproxy_hub:
    service:
      name: "{{ params.node_service | default('skip') }}"
      params:
        tags:
          - "auto"
          - "rproxy-dmz"
    dns_service: "node_dns_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
    shared_params: ["remote"]
    pods:
      - name: "rproxy_hub"
        key: "rproxy"
        shared_params:
          - "main"
          - "hub_item"
          - "main_hub_{{ params.rproxy_type | default('nginx') }}"
      - name: "rproxy_web_1"
        key: "rproxy"
        shared_params: ["hub_item", "hub_web", "remote_web_1"]
      - name: "rproxy_web_2"
        key: "rproxy"
        shared_params: ["hub_item", "hub_web", "remote_web_2"]
      - name: "rproxy_web_3"
        key: "rproxy"
        shared_params: ["hub_item", "hub_web", "remote_web_3"]
  rproxy_external_hub:
    service:
      name: "{{ params.node_service | default('skip') }}"
      params:
        tags:
          - "auto"
          - "rproxy-dmz"
    dns_service: "node_dns_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
    shared_params: ["remote"]
    pods:
      - name: "rproxy"
        shared_params:
          - "main"
          - "main_external_hub_{{ params.rproxy_type | default('nginx') }}"
  rproxy_web:
    service:
      name: "{{ params.node_service | default('skip') }}"
      params:
        tags:
          - "auto"
          - "rproxy-web"
    dns_service: "node_dns_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    shared_params: ["remote"]
    pods:
      - name: "rproxy"
        shared_params: ["external_hub_web"]
node_shared_params:
  remote:
    host_users:
      - name: "host"
        setup_log_file: "/var/log/setup.log"
        setup_finished_log_regex: "^Setup Finished.*$"
        setup_success_log_last_line: "Setup Finished - Success"
        initial_connection_timeout: 90
        setup_finished_timeout: 300
    cron:
      - dest: "/var/spool/cron/crontabs/root"
        when: "{{ params.define_cron | default(false) }}"
        user: "root"
        src:
          type: "template"
          origin: "cloud"
          file: "ext-cloud/files/cron/pod.tpl.sh"
          schema: "ext-cloud/files/cron/pod.schema.yml"
          params:
            tasks:
              - name: "watch"
                when: "{{ params.include_cron_watch | default(false) }}"
                task: "unique:action:watch"
                cron: "*/1 * * * *"
              - name: "pending"
                when: "{{ not (params.include_cron_watch | default(false) | bool) }}"
                task: "unique:action:pending"
                cron: "*/1 * * * *"
              - name: "log"
                task: "custom:unique:log"
                cron: "*/5 * * * *"
              - name: "block_ips"
                when: "{{ params.block_ips | default(false) }}"
                task: "unique:action:block_ips"
                cron: "*/15 * * * *"
              - name: "full_log"
                task: "unique:all logrotate log_summary"
                cron: "* */1 * * *"
              - name: "backup"
                task: "unique:action:backup"
                cron: "0 */6 * * *"
              - name: "replicate_s3"
                task: "unique:action:replicate_s3"
                cron: "3 */1 * * *"
pods:
  rproxy:
    repo: "pod"
    root: "yes"
    ctx: "ext-pod/rproxy/rproxy.ctx.yml"
    schema: "ext-pod/rproxy/rproxy.schema.yml"
    validator: "ext-pod/rproxy/rproxy.validator.yml"
    fast_prepare: "true"
    ext_repos:
      - repo: "ext_pod"
        dir: "ext-pod"
    credentials:
      minio_gateway: "{{ params.use_minio_gateway | default(false) | bool | ternary('minio_gateway', '') }}"
      backup_bucket: "{{ params.use_s3 | default(false) | bool | ternary('s3', '') }}"
      backup_replica_bucket: "{{ params.enable_backup_replica | default(false) | bool | ternary('s3_replica', '') }}"
    contents:
      auth_content: "{{ params.auth_content | default('') }}"
    params:
      rproxy_type: "{{ params.rproxy_type | default('nginx') }}"
      orchestration: "docker_compose"
      custom_dir: "ext-pod"
      custom_dir_sync: "{{ params.pod_custom_dir_sync | default(false) }}"
      meta: "{{ params.pod_meta | default({}) }}"
      use_fluentd: "{{ params.use_fluentd | default(false) }}"
      s3_cli: "{{ params.s3_cli | default('') }}"
      backup_bucket_name: "{{ params.backup_bucket_name | default('') }}"
      backup_bucket_path: "{{ params.backup_bucket_path | default('') }}"
      backup_replica_bucket_name: "{{ params.backup_replica_bucket_name | default('') }}"
      backup_replica_bucket_path: "{{ params.backup_replica_bucket_path | default('') }}"
      enable_logs_backup: "{{ params.enable_logs_backup | default(false) }}"
      enable_logs_setup: "{{ params.enable_logs_setup | default(false) }}"
      enable_sync_backup: "{{ params.enable_sync_backup | default(false) }}"
      enable_sync_setup: "{{ params.enable_sync_setup | default(false) }}"
      enable_backup_replica: "{{ params.enable_backup_replica | default(false) }}"
      certbot:
        email: "{{ params.certbot_email | default('') }}"
        staging: "{{ params.certbot_staging | default(false) }}"
        force: "{{ params.certbot_force | default(false) }}"
      services:
        haproxy:
          conf:
            ssl: "{{ params.use_ssl | default(false) }}"
            webservice_endpoint: "http://nginx"
            basic_auth_data_content: "auth_content"
        fluentd:
          port: "24224"
      images:
        nginx_image: "nginx"
        nginx_version: "1.14.2-alpine"
        haproxy_image: "haproxy"
        haproxy_version: "2.3"
        theia_image: "theiaide/theia"
        theia_version: "1.3.0"
        minio_gateway_image: "minio/minio"
        minio_gateway_version: "RELEASE.2020-07-02T00-15-09Z"
        toolbox_image: "lucasbasquerotto/image"
        toolbox_version: "toolbox-20210309-02"
        certbot_image: "certbot/certbot"
        certbot_version: "v1.2.0"
        awscli_image: "lucasbasquerotto/aws-cli"
        awscli_version: "1.0.0"
        mc_image: "minio/mc"
        mc_version: "RELEASE.2021-03-12T03-36-59Z"
        rclone_image: "rclone/rclone"
        rclone_version: "1.54.0"
        logrotator_image: "python"
        logrotator_version: "3.8.4-buster"
        fluentd_image: "lucasbasquerotto/image"
        fluentd_version: "fluentd-20200617"
      memory:
        nginx: 512mb
        theia: 512mb
        minio_gateway: 512mb
        toolbox: 512mb
        certbot: 256mb
        fluentd: 256mb
        s3_cli: 512mb
    transfer:
      - dest: "env/{{ params.s3_cli | default('') }}/etc/s3-backup-lifecycle.json"
        when: "{{ params.define_s3_backup_lifecycle | default(false) }}"
        src:
          type: "template"
          origin: "cloud"
          file: "ext-cloud/files/s3/s3_lifecycle.json.j2"
          schema: "ext-cloud/files/s3/s3_lifecycle.schema.yml"
          params:
            rules:
              - name: "old-pictures"
                filter_prefix: "old/"
                expiration_days: 180
              - name: "temp-uploads"
                filter_prefix: "temp/"
                expiration_days: 7
              - name: "removing-all-old-versions"
                filter_prefix: "users-uploads/"
                older_versions_expiration_days: 365
              - name: "not-to-be-included"
                filter_prefix: "wrong/"
                when: false
              - name: "disabled-rule"
                filter_prefix: "disabled/"
                expiration_days: 1
                enabled: false
              - name: "removing-all-delete-markers"
                remove_delete_markers: true
                when: false
      - dest: "env/nginx/www/index.html"
        src:
          type: "template"
          origin: "cloud"
          file: "ext-cloud/demo/rproxy/sample.tpl.html"
pod_shared_params:
  main:
    main_domain: "{{ params.main_domain | default('') }}"
    domains: "{{ params.domains | default({}) }}"
    use_ssl: "{{ params.use_ssl | default(false) }}"
    use_pod_prefix: "{{ params.use_pod_prefix | default(false) }}"
    use_pod_full_prefix: "{{ params.use_pod_full_prefix | default(false) }}"
    use_theia: "{{ params.use_theia | default(false) }}"
    use_minio_gateway: "{{ params.use_minio_gateway | default(false) }}"
    use_certbot: "{{ params.use_certbot | default(false) }}"
    use_private_path: "{{ params.use_private_path | default(false) }}"
    block_ips: "{{ params.block_ips | default(false) }}"
    auth_file: "{{ params.auth_file | default('') }}"
    define_s3_backup_lifecycle: "{{ params.define_s3_backup_lifecycle | default(false) }}"
    s3_backup_lifecycle_file: "s3-backup-lifecycle.json"
  local:
    local: true
    enable_logs_setup: false
    enable_sync_setup: false
    custom_ssl: "{{ params.local_custom_ssl | default({}) }}"
    main_domain: "{{ params.local_main_domain | default('localhost') }}"
    domains: "{{ params.local_domains | default({}) }}"
  hub_item:
    shared_network: "rproxy-hub-network"
  hub_web:
    internal: true
    use_pod_prefix: true
    use_pod_full_prefix: false
    rproxy_type: "nginx"
    rproxy_services:
      - name: "rproxy"
        locations:
          - location: "= /nginx/basic_status"
            data: "stub_status;"
          - location: "/"
            data: "root /var/www;"
  external_hub_web:
    rproxy_type: "nginx"
    use_theia: "{{ params.use_theia | default(false) }}"
    auth_file: "{{ params.auth_file | default('') }}"
    rproxy_services:
      - name: "rproxy"
        locations:
          - location: "= /nginx/basic_status"
            data: "stub_status;"
          - location: "/"
            data: "root /var/www;"
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
  local_web_1:
    main_domain: "{{ params.local_domains.rproxy_web_1 | default('') }}"
    domains:
      rproxy: "{{ params.local_domains.rproxy_web_1 | default('') }}"
  local_web_2:
    main_domain: "{{ params.local_domains.rproxy_web_2 | default('') }}"
    domains:
      rproxy: "{{ params.local_domains.rproxy_web_2 | default('') }}"
  local_web_3:
    main_domain: "{{ params.local_domains.rproxy_web_3 | default('') }}"
    domains:
      rproxy: "{{ params.local_domains.rproxy_web_3 | default('') }}"
  remote_web_1:
    main_domain: "{{ params.domains.rproxy_web_1 | default('') }}"
    domains:
      rproxy: "{{ params.domains.rproxy_web_1 | default('') }}"
      theia: "{{ params.domains.rproxy_web_1_theia | default('') }}"
  remote_web_2:
    main_domain: "{{ params.domains.rproxy_web_2 | default('') }}"
    domains:
      rproxy: "{{ params.domains.rproxy_web_2 | default('') }}"
      theia: "{{ params.domains.rproxy_web_2_theia | default('') }}"
  remote_web_3:
    main_domain: "{{ params.domains.rproxy_web_3 | default('') }}"
    domains:
      rproxy: "{{ params.domains.rproxy_web_3 | default('') }}"
      theia: "{{ params.domains.rproxy_web_3_theia | default('') }}"
  local_replica:
    main_domain: "{{ params.local_domains.rproxy_replica | default('') }}"
    domains:
      rproxy: "{{ params.local_domains.rproxy_replica | default('') }}"
  remote_replica:
    main_domain: "{{ params.domains.rproxy_replica | default('') }}"
    domains:
      rproxy: "{{ params.domains.rproxy_replica | default('') }}"
      theia: "{{ params.domains.rproxy_replica_theia | default('') }}"
  main_nginx:
    rproxy_services:
      - name: "rproxy"
        locations:
          - location: "= /nginx/basic_status"
            data: "stub_status;"
          - location: "/"
            data: "root /var/www;"
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
  main_haproxy:
    rproxy_services:
      - name: "rproxy"
        endpoint: "http://nginx"
        frontend_data: |-
          acl is_rate_limit_path_rproxy    path /
          http-request deny deny_status 429 if is_domain_rproxy is_rate_limit_path_rproxy { sc_http_req_rate(0) gt 3 }
        locations:
          - location: "path_beg /"
            data: "timeout queue 5s"
            server_args: "check maxconn 3"
      - name: "private"
        when: "{{ params.use_private_path | default(false) }}"
        frontend_data: |-
          stats enable if is_domain_private
          stats uri /stats if is_domain_private
          stats refresh 60s if is_domain_private
          stats admin if is_domain_private
        private: true
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
  main_hub_nginx:
    rproxy_services:
      - name: "rproxy"
        locations:
          - location: "= /nginx/basic_status"
            data: "stub_status;"
          - location: "/"
            data: "root /var/www;"
      - name: "rproxy_web_1"
        endpoint: "http://rproxy_web_1-main-nginx"
      - name: "rproxy_web_2"
        endpoint: "http://rproxy_web_2-main-nginx"
      - name: "rproxy_web_3"
        endpoint: "http://rproxy_web_3-main-nginx"
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
  main_hub_haproxy:
    rproxy_services:
      - name: "rproxy"
        endpoint: "http://nginx"
        frontend_data: |-
          acl is_rate_limit_path_rproxy    path /
          http-request deny deny_status 429 if is_domain_rproxy is_rate_limit_path_rproxy { sc_http_req_rate(0) gt 3 }
        locations:
          - location: "path_beg /"
            data: "timeout queue 5s"
            server_args: "check maxconn 3"
      - name: "private"
        when: "{{ params.use_private_path | default(false) }}"
        frontend_data: |-
          stats enable if is_domain_private
          stats uri /stats if is_domain_private
          stats refresh 60s if is_domain_private
          stats admin if is_domain_private
        private: true
      - name: "rproxy_web_1"
        endpoint: "http://rproxy_web_1-main-nginx"
      - name: "rproxy_web_2"
        endpoint: "http://rproxy_web_2-main-nginx"
      - name: "rproxy_web_3"
        endpoint: "http://rproxy_web_3-main-nginx"
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
  main_external_hub_nginx:
    rproxy_services:
      - name: "rproxy"
        locations:
          - location: "= /nginx/basic_status"
            data: "stub_status;"
          - location: "/"
            data: "root /var/www;"
      - name: "rproxy_web_1"
        proxy: true
      - name: "rproxy_web_1_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "rproxy_web_1_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "rproxy_web_2"
        proxy: true
      - name: "rproxy_web_2_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "rproxy_web_2_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "rproxy_web_3"
        proxy: true
      - name: "rproxy_web_3_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "rproxy_web_3_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
  main_external_hub_haproxy:
    rproxy_services:
      - name: "rproxy"
        endpoint: "http://nginx"
        frontend_data: |-
          acl is_rate_limit_path_rproxy    path /
          http-request deny deny_status 429 if is_domain_rproxy is_rate_limit_path_rproxy { sc_http_req_rate(0) gt 3 }
        locations:
          - location: "path_beg /"
            data: "timeout queue 5s"
            server_args: "check maxconn 3"
      - name: "private"
        when: "{{ params.use_private_path | default(false) }}"
        frontend_data: |-
          stats enable if is_domain_private
          stats uri /stats if is_domain_private
          stats refresh 60s if is_domain_private
          stats admin if is_domain_private
        private: true
      - name: "rproxy_web_1"
        proxy: true
      - name: "rproxy_web_1_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "rproxy_web_1_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "rproxy_web_2"
        proxy: true
      - name: "rproxy_web_2_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "rproxy_web_2_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "rproxy_web_3"
        proxy: true
      - name: "rproxy_web_3_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "rproxy_web_3_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
  main_replicas_hub_nginx:
    rproxy_services:
      - name: "rproxy"
        locations:
          - location: "= /nginx/basic_status"
            data: "stub_status;"
          - location: "/"
            data: "root /var/www;"
      - name: "rproxy_replica"
        dependency_name: "replica"
        proxy: true
      - name: "rproxy_replica_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "replica_private"
        upstream_data: "least_conn;"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
  main_replicas_hub_haproxy:
    rproxy_services:
      - name: "rproxy"
        endpoint: "http://nginx"
        frontend_data: |-
          acl is_rate_limit_path_rproxy    path /
          http-request deny deny_status 429 if is_domain_rproxy is_rate_limit_path_rproxy { sc_http_req_rate(0) gt 3 }
        locations:
          - location: "path_beg /"
            data: "timeout queue 5s"
            server_args: "check maxconn 3"
      - name: "private"
        when: "{{ params.use_private_path | default(false) }}"
        frontend_data: |-
          stats enable if is_domain_private
          stats uri /stats if is_domain_private
          stats refresh 60s if is_domain_private
          stats admin if is_domain_private
        private: true
      - name: "rproxy_replica"
        dependency_name: "replica"
        proxy: true
      - name: "rproxy_replica_theia"
        when: "{{ params.use_theia | default(false) }}"
        dependency_name: "replica_private"
        proxy: true
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "theia"
        when: "{{ params.use_theia | default(false) }}"
        endpoint: "http://theia:3000"
        upgrade: true
        private: true
        use_basic_auth: false
      - name: "minio_gateway"
        when: "{{ params.use_minio_gateway | default(false) }}"
        endpoint: "http://minio_gateway:9000"
        private: true
        use_basic_auth: false
tasks:
  docker_compose_install:
    type: "task"
    root: true
    file: "ext-cloud/run-tasks/docker.yml"
    schema: "ext-cloud/run-tasks/docker.schema.yml"
    params:
      compose:
        version: "1.27.2"
  main_build:
    type: "shell"
    root: true
    cmd: "./run build"
  main_upgrade:
    type: "shell"
    root: true
    cmd: "./run upgrade"
contents:
  user_data_ubuntu:
    type: "template"
    origin: "cloud"
    file: "ext-cloud/files/user-data/ubuntu-18.04.tpl.sh"
    schema: "ext-cloud/files/user-data/ubuntu-18.04.schema.yml"
    params:
      user_directories: ["/var/cloud"]
      install_docker: true
      install_podman: false
      install_packages: true
    credentials:
      node: "host"
    contents:
      host_ssh_public_keys: "{{ params.host_ssh_public_keys_content | default('') }}"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  ext_cloud:
    src: "https://github.com/lucasbasquerotto/ext-cloud.git"
    version: "master"
  pod:
    src: "https://github.com/lucasbasquerotto/pod.git"
    version: "master"
  ext_pod:
    src: "https://github.com/lucasbasquerotto/ext-pod.git"
    version: "master"
credentials: "{{ credentials }}"
