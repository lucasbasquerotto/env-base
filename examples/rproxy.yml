name: "{{ params.name }}"
ctxs: "{{ params.ctxs }}"
migration: ""
container: ""
meta:
  ignore_validators: false
  skip_local_pod_preparation: false
  template_no_empty_lines: true
cloud:
  repo: "cloud"
  ext_repos:
    - repo: "ext_cloud"
      dir: "ext-cloud"
  collections:
    - namespace: "lrd"
      collection: "ext_cloud"
      path: "ext-cloud/collection"
  hosts:
    type: "template"
    file: "files/hosts.tpl.ini"
    schema: "files/hosts.schema.yml"
main:
  cloud:
    extend_cloud: true
    initial_services:
      - "{{ params.env_params.vpn_service }}"
  local:
    extend_cloud: true
    nodes:
      - name: "app"
        key: "rproxy_local"
        local: true
  remote:
    extend_cloud: true
    initial_services:
      - "{{ params.env_params.vpn_service }}"
      - name: "s3_buckets"
        can_destroy: true
    nodes:
      - name: "app"
        key: "rproxy"
        can_destroy: true
    run_stages:
      - tasks:
          - name: "docker_compose_install"
            all_nodes: true
            task_target: "node"
          - name: "main_upgrade"
            all_nodes: true
            task_target: "pod"
services:
  s3_buckets:
    base_dir: "ext-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    validator: "tasks/s3/validator.s3.yml"
    credentials:
      s3: "s3"
    params:
      list:
        - bucket: "{{ params.env_params.backup_bucket_name }}"
          permission: "private"
  node_dns_service:
    base_dir: "ext-cloud"
    namespace: "ext_dns"
    task: >-
      tasks/dns/{{
        params.env_params.dns_provider | default('')
      }}/{{
        params.env_params.dns_provider | default('')
      }}.main.dns.yml
    schema: >-
      tasks/dns/{{
        params.env_params.dns_provider | default('')
      }}/{{
        params.env_params.dns_provider | default('')
      }}.schema.dns.yml
    validator: >-
      tasks/dns/{{
        params.env_params.dns_provider | default('')
      }}/{{
        params.env_params.dns_provider | default('')
      }}.validator.dns.yml
    credentials:
      dns: "{{ params.env_params.dns_provider }}"
    params:
      zone: "{{ params.env_params.main_domain }}"
  digital_ocean_vpn:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/digital_ocean/digital_ocean.main.vpn.yml"
    schema: "tasks/vpn/digital_ocean/digital_ocean.schema.vpn.yml"
    validator: "tasks/vpn/digital_ocean/digital_ocean.validator.vpn.yml"
    credentials:
      vpn: "digital_ocean"
    params:
      tags:
        - "auto"
        - "web"
        - "dmz"
      firewalls:
        - name: "private"
          tags: ["auto"]
          inbound_rules:
            - ports: "9080"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
            - ports: "9443"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
                addresses: "{{ params.env_params.private_ips }}"
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "web"
          tags: ["web"]
          inbound_rules:
            - ports: "80"
              sources:
                tags: ["dmz"]
            - ports: "443"
              sources:
                tags: ["dmz"]
        - name: "dmz"
          tags: ["dmz"]
          inbound_rules:
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
  digital_ocean_node:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/digital_ocean/digital_ocean.main.node.yml"
    schema: "tasks/node/digital_ocean/digital_ocean.schema.node.yml"
    validator: "tasks/node/digital_ocean/digital_ocean.validator.node.yml"
    credentials:
      node: "digital_ocean"
    params:
      image_id: "ubuntu-18-04-x64"
      ipv6: true
      region_id: "ams3"
      size_id: "s-2vcpu-2gb"
    contents:
      user_data:
        type: "template"
        origin: "cloud"
        file: "ext-cloud/files/user-data/ubuntu-18.04.tpl.sh"
        schema: "ext-cloud/files/user-data/ubuntu-18.04.schema.yml"
        params:
          user_directories: ["/var/cloud"]
          install_docker: true
          install_podman: false
          install_packages: false
        credentials:
          node: "host"
        contents:
          host_ssh_public_keys: "{{ params.env_params.host_ssh_public_keys_content | default('') }}"
nodes:
  rproxy_local:
    credentials:
      host: "localhost"
    pods:
      - name: "rproxy"
        params:
          local: true
          named_volumes: "{{ params.env_params.named_volumes | default(false) }}"
          custom_ssl: "{{ params.env_params.local_custom_ssl | default({}) }}"
          enable_logs_setup: false
          enable_sync_setup: false
          main_domain: "{{ params.env_params.local_main_domain | default('localhost') }}"
          domains: "{{ params.env_params.local_domains | default({}) }}"
          ports:
            public_http_port: "8080"
            public_https_port: "8443"
            private_http_port: "9080"
            private_https_port: "9443"
          rproxy_default_services:
            - name: "rproxy"
              domain: "{{ params.env_params.local_domains.rproxy }}"
              location_info_list:
                - location: "= /nginx/basic_status"
                  data: "stub_status;"
                - location: "/"
                  data: "root /www;"
            - name: "theia"
              when: "{{ params.env_params.use_theia | default(false) }}"
              domain: "{{ params.env_params.local_domains.theia | default('') }}"
              service: "http://theia:3000"
              upgrade: true
              private: true
            - name: "minio_gateway"
              when: "{{ params.env_params.use_minio_gateway | default(false) }}"
              domain: "{{ params.env_params.local_domains.minio_gateway | default('') }}"
              service: "http://minio_gateway:9000"
              private: true
          rproxy_custom_services: >-
            {{
              params.env_params.rproxy_custom_local_services
              | default(params.env_params.rproxy_custom_services | default([]))
            }}
  rproxy:
    service:
      name: "{{ params.env_params.node_service }}"
      params:
        tags:
          - "auto"
          - "dmz"
    dns_service: "node_dns_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      dns_service_params_list: "{{ params.env_params.dns_service_params_list | default([]) }}"
      host_users:
        - name: "host"
          setup_log_file: "/var/log/setup.log"
          setup_finished_log_regex: "^Setup Finished.*$"
          setup_success_log_last_line: "Setup Finished - Success"
          initial_connection_timeout: 90
          setup_finished_timeout: 300
      cron:
        - dest: "/var/spool/cron/crontabs/root"
          user: "root"
          src:
            type: "template"
            origin: "cloud"
            file: "ext-cloud/files/cron/pod.tpl.sh"
            schema: "ext-cloud/files/cron/pod.schema.yml"
            params:
              tasks:
                - name: "sync"
                  task: "sync:verify"
                  cron: "*/1 * * * *"
                - name: "backup"
                  cron: "*/5 * * * *"
    pods:
      - name: "rproxy"
        params:
          local: false
          domains: "{{ params.env_params.domains | default({}) }}"
          ports:
            public_http_port: "80"
            public_https_port: "443"
            private_http_port: "9080"
            private_https_port: "9443"
pods:
  rproxy:
    repo: "pod"
    root: "yes"
    ctx: "ext-pod/rproxy/rproxy.ctx.yml"
    schema: "ext-pod/rproxy/rproxy.schema.yml"
    validator: "ext-pod/rproxy/rproxy.validator.yml"
    fast_prepare: "true"
    ext_repos:
      - repo: "ext_pod"
        dir: "ext-pod"
    credentials:
      minio_gateway: "minio_gateway"
      backup_bucket: "s3"
      backup_replica_bucket: "s3_replica"
    params:
      orchestration: "docker_compose"
      custom_dir: "ext-pod"
      custom_dir_sync: "{{ params.env_params.pod_custom_dir_sync | default(false) }}"
      main_domain: "{{ params.env_params.main_domain }}"
      use_ssl: "{{ params.env_params.ssl | default(false) }}"
      use_pod_prefix: "{{ params.env_params.use_pod_prefix | default(false) }}"
      use_pod_full_prefix: "{{ params.env_params.use_pod_full_prefix | default(false) }}"
      use_theia: "{{ params.env_params.use_theia }}"
      use_minio_gateway: "{{ params.env_params.use_minio_gateway }}"
      use_fluentd: "{{ params.env_params.use_fluentd }}"
      use_certbot: "{{ params.env_params.use_certbot }}"
      auth_file: "{{ params.env_params.auth_file }}"
      s3_cli: "{{ params.env_params.s3_cli }}"
      backup_bucket_name: "{{ params.env_params.backup_bucket_name }}"
      backup_bucket_path: "{{ params.env_params.backup_bucket_path | default('') }}"
      backup_replica_bucket_name: "{{ params.env_params.backup_replica_bucket_name }}"
      backup_replica_bucket_path: "{{ params.env_params.backup_replica_bucket_path | default('') }}"
      enable_logs_backup: true
      enable_logs_setup: true
      enable_sync_backup: true
      enable_sync_setup: true
      enable_backup_replica: "{{ params.env_params.enable_backup_replica | default(false) }}"
      certbot:
        email: "{{ params.env_params.certbot_email | default('') }}"
        staging: "{{ params.env_params.certbot_staging | default(false) }}"
        force: "{{ params.env_params.certbot_force | default(false) }}"
      services:
        fluentd:
          port: "24224"
      images:
        nginx_image: "nginx"
        nginx_version: "1.14.2-alpine"
        theia_image: "theiaide/theia"
        theia_version: "1.3.0"
        minio_gateway_image: "minio/minio"
        minio_gateway_version: "RELEASE.2020-07-02T00-15-09Z"
        toolbox_image: "lucasbasquerotto/image"
        toolbox_version: "toolbox-20200715-02"
        certbot_image: "certbot/certbot"
        certbot_version: "v1.2.0"
        awscli_image: "lucasbasquerotto/aws-cli"
        awscli_version: "1.0.0"
        logrotator_image: "python"
        logrotator_version: "3.8.4-buster"
        fluentd_image: "lucasbasquerotto/image"
        fluentd_version: "fluentd-20200617"
      memory:
        nginx: 512mb
        theia: 512mb
        minio_gateway: 512mb
        toolbox: 512mb
        certbot: 256mb
        fluentd: 256mb
        s3_cli: 512mb
      rproxy_default_services:
        - name: "rproxy"
          domain: "{{ params.env_params.domains.rproxy }}"
          location_info_list:
            - location: "= /nginx/basic_status"
              data: "stub_status;"
            - location: "/"
              data: "root /www;"
        - name: "theia"
          when: "{{ params.env_params.use_theia | default(false) }}"
          domain: "{{ params.env_params.domains.theia | default('') }}"
          service: "http://theia:3000"
          upgrade: true
          private: true
        - name: "minio_gateway"
          when: "{{ params.env_params.use_minio_gateway | default(false) }}"
          domain: "{{ params.env_params.domains.minio_gateway | default('') }}"
          service: "http://minio_gateway:9000"
          private: true
      rproxy_custom_services: "{{ params.env_params.rproxy_custom_services | default([]) }}"
    transfer:
      - dest: "env/nginx/www/index.html"
        src:
          type: "template"
          origin: "cloud"
          file: "ext-cloud/demo/rproxy/sample.tpl.html"
tasks:
  docker_compose_install:
    type: "task"
    root: true
    file: "ext-cloud/run-tasks/docker.yml"
    schema: "ext-cloud/run-tasks/docker.schema.yml"
    params:
      compose:
        version: "1.27.2"
  main_build:
    type: "shell"
    root: true
    cmd: "./run build"
  main_upgrade:
    type: "shell"
    root: true
    cmd: "./run upgrade"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  ext_cloud:
    src: "https://github.com/lucasbasquerotto/ext-cloud.git"
    version: "master"
  pod:
    src: "https://github.com/lucasbasquerotto/pod.git"
    version: "master"
  ext_pod:
    src: "https://github.com/lucasbasquerotto/ext-pod.git"
    version: "master"
credentials: "{{ params.credentials }}"
