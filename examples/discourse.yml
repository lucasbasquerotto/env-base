name: "{{ project_name }}"
ctxs: "{{ project_ctxs }}"
meta: "{{ params.meta | default({ 'template_no_empty_lines': true }) }}"
cloud:
  repo: "cloud"
  ext_repos:
    - repo: "ext_cloud"
      dir: "ext-cloud"
  collections:
    - namespace: "lrd"
      collection: "ext_cloud"
      path: "ext-cloud/collection"
  hosts:
    type: "template"
    file: "files/hosts.tpl.ini"
    schema: "files/hosts.schema.yml"
main:
  cloud:
    extend_cloud: true
    initial_services:
      - name: "{{ params.cloud_service | default('skip', true) }}"
        when: "{{ (params.cloud_service | default('skip', true)) != 'skip' }}"
      - name: "{{ params.run_nameserver_main | default(false) | bool | ternary('nameserver_main_service', 'skip') }}"
        when: "{{ params.run_nameserver_main | default(false) | bool }}"
      - name: "{{ params.run_dns_main | default(false) | bool | ternary('dns_main_service', 'skip') }}"
        when: "{{ params.run_dns_main | default(false) | bool }}"
  remote:
    extend_cloud: true
    initial_services:
      - name: "{{ params.cloud_service | default('skip', true) }}"
        when: "{{ (params.cloud_service | default('skip', true)) != 'skip' }}"
      - name: "{{ params.run_nameserver_main | default(false) | bool | ternary('nameserver_main_service', 'skip') }}"
        when: "{{ params.run_nameserver_main | default(false) | bool }}"
      - name: "{{ params.run_dns_main | default(false) | bool | ternary('dns_main_service', 'skip') }}"
        when: "{{ params.run_dns_main | default(false) | bool }}"
      - name: "{{ params.discourse.use_s3 | default(false) | bool | ternary('s3_buckets', 'skip') }}"
        when: "{{ params.discourse.use_s3 | default(false) | bool }}"
        can_destroy: true
    nodes:
      - name: "app"
        key: "discourse"
        hostname: "{{ params.app_hostname | default('') }}"
        can_destroy: true
        params:
          dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
        pods:
          discourse:
            transfer:
              - dest: "containers/app.yml"
                src: >-
                  {{
                    params.discourse_app_container_content
                    | default({ 'type': 'env', 'name': 'discourse_app_container' }, true)
                  }}
    run_stages:
      - tasks:
          - name: "discourse_setup"
            all_nodes: true
            task_target: "pod"
          - name: "discourse_rebuild"
            all_nodes: true
            task_target: "pod"
  multicontainer:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service }}"
      - name: "{{ params.discourse.use_s3 | default(false) | bool | ternary('s3_buckets', 'skip') }}"
        when: "{{ params.discourse.use_s3 | default(false) | bool }}"
        can_destroy: true
    nodes:
      - name: "app"
        key: "discourse"
        hostname: "{{ params.app_hostname | default('') }}"
        can_destroy: true
        params:
          dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
        pods:
          discourse:
            transfer:
              - dest: "containers/web.yml"
                src: >-
                  {{
                    params.discourse_web_internal_container_content
                    | default({ 'type': 'env', 'name': 'discourse_web_internal_container' }, true)
                  }}
              - dest: "containers/db.yml"
                src: >-
                  {{
                    params.discourse_db_internal_container_content
                    | default({ 'type': 'env', 'name': 'discourse_db_internal_container' }, true)
                  }}
    run_stages:
      - tasks:
          - name: "discourse_setup"
            all_nodes: true
            task_target: "pod"
          - name: "discourse_rebuild_db"
            all_nodes: true
            task_target: "pod"
      - tasks:
          - name: "discourse_rebuild_web"
            all_nodes: true
            task_target: "pod"
  nodes:
    extend_cloud: true
    initial_services:
      - "{{ params.cloud_service }}"
      - name: "{{ params.discourse.use_s3 | default(false) | bool | ternary('s3_buckets', 'skip') }}"
        when: "{{ params.discourse.use_s3 | default(false) | bool }}"
        can_destroy: true
    nodes:
      - name: "web"
        key: "discourse"
        hostname: "{{ params.web_hostname | default('') }}"
        can_destroy: true
        dependencies:
          db:
            type: "node"
            host: "db"
            port: "5432"
            required_amount: 1
          redis:
            type: "node"
            host: "redis"
            port: "6379"
            required_amount: 1
        params:
          service_params:
            tags:
              - "auto"
              - "discourse-web"
              - "discourse-dmz"
          dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
        pods:
          discourse:
            transfer:
              - dest: "containers/web.yml"
                src: >-
                  {{
                    params.discourse_web_container_content
                    | default({ 'type': 'env', 'name': 'discourse_web_container' }, true)
                  }}
      - name: "redis"
        key: "discourse"
        hostname: "{{ params.redis_hostname | default('') }}"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "discourse-redis"
        pods:
          discourse:
            transfer:
              - dest: "containers/redis.yml"
                src: >-
                  {{
                    params.discourse_redis_container_content
                    | default({ 'type': 'env', 'name': 'discourse_redis_container' }, true)
                  }}
      - name: "db"
        key: "discourse"
        hostname: "{{ params.db_hostname | default('') }}"
        can_destroy: true
        params:
          service_params:
            tags:
              - "auto"
              - "discourse-pg"
        pods:
          discourse:
            transfer:
              - dest: "containers/db.yml"
                src: >-
                  {{
                    params.discourse_db_container_content
                    | default({ 'type': 'env', 'name': 'discourse_db_container' }, true)
                  }}
    run_stages:
      - tasks:
          - name: "discourse_setup"
            all_nodes: true
            task_target: "pod"
          - name: "discourse_rebuild_db"
            nodes: ["db"]
            task_target: "pod"
          - name: "discourse_rebuild_redis"
            nodes: ["redis"]
            task_target: "pod"
      - tasks:
          # - name: "task_dependencies"
          #   nodes: ["web"]
          #   task_target: "node"
          - name: "discourse_rebuild_web"
            nodes: ["web"]
            task_target: "pod"
services:
  skip:
    list: true
    services: []
  s3_buckets:
    base_dir: "ext-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    validator: "tasks/s3/validator.s3.yml"
    credentials:
      s3: "discourse_s3"
    params:
      list:
        - bucket: "{{ params.discourse.backup_bucket_name | default('') }}"
          permission: "private"
        - bucket: "{{ params.discourse.uploads_bucket_name | default('') }}"
          permission: "public-read"
  nameserver_main_service:
    base_dir: "ext-cloud"
    namespace: "ext_nameserver"
    task: >-
      tasks/nameserver/{{
        params.nameserver_provider | default('')
      }}/{{
        params.nameserver_provider | default('')
      }}.main.nameserver.yml
    schema: >-
      tasks/nameserver/{{
        params.nameserver_provider | default('')
      }}/{{
        params.nameserver_provider | default('')
      }}.schema.nameserver.yml
    validator: >-
      tasks/nameserver/{{
        params.nameserver_provider | default('')
      }}/{{
        params.nameserver_provider | default('')
      }}.validator.nameserver.yml
    credentials:
      nameserver: "{{ params.nameserver_provider | default('') }}"
    params:
      zone: "{{ params.main_domain | default('') }}"
      nameservers: "{{ params.main_nameservers | default([]) }}"
  dns_main_service:
    list: true
    services:
      - name: "dns_base_service"
        params:
          list: "{{ params.dns_main_service_params_list | default([]) }}"
  dns_base_service:
    base_dir: "ext-cloud"
    namespace: "ext_dns"
    task: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.main.dns.yml
    schema: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.schema.dns.yml
    validator: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.validator.dns.yml
    credentials:
      dns: "{{ params.dns_provider }}"
    params:
      zone: "{{ params.main_domain }}"
  digital_ocean_vpn:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/digital_ocean/digital_ocean.main.vpn.yml"
    schema: "tasks/vpn/digital_ocean/digital_ocean.schema.vpn.yml"
    validator: "tasks/vpn/digital_ocean/digital_ocean.validator.vpn.yml"
    credentials:
      vpn: "digital_ocean"
    params:
      tags:
        - "auto"
        - "discourse-pg"
        - "discourse-redis"
        - "discourse-web"
        - "discourse-dmz"
        - "node-exporter"
      firewalls:
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
                addresses: "{{ params.private_ips }}"
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "discourse-pg"
          tags: ["discourse-pg"]
          inbound_rules:
            - ports: "5432"
              sources:
                tags: ["discourse-web"]
        - name: "discourse-redis"
          tags: ["discourse-redis"]
          inbound_rules:
            - ports: "6379"
              sources:
                tags: ["discourse-web"]
        - name: "discourse-web"
          tags: ["discourse-web"]
          inbound_rules:
            - ports: "80"
              sources:
                tags: ["discourse-dmz"]
            - ports: "443"
              sources:
                tags: ["discourse-dmz"]
        - name: "discourse-dmz"
          tags: ["discourse-dmz"]
          inbound_rules:
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "node-exporter"
          tags: ["node-exporter"]
          when: "{{ params.use_node_exporter | default(false) }}"
          inbound_rules:
            - ports: "9100"
              sources:
                tags: ["prometheus"]
  digital_ocean_node:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/digital_ocean/digital_ocean.main.node.yml"
    schema: "tasks/node/digital_ocean/digital_ocean.schema.node.yml"
    validator: "tasks/node/digital_ocean/digital_ocean.validator.node.yml"
    credentials:
      node: "digital_ocean"
    params:
      image_id: "ubuntu-18-04-x64"
      region_id: "{{ params.digital_ocean_node_region | default('ams3') }}"
      size_id: "{{ params.digital_ocean_node_size | default('s-2vcpu-2gb') }}"
      ipv6: true
      monitoring: true
      resize_disk: true
    contents:
      user_data:
        type: "env"
        name: "user_data_ubuntu"
  linode:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/linode/linode.main.node.yml"
    schema: "tasks/node/linode/linode.schema.node.yml"
    validator: "tasks/node/linode/linode.validator.node.yml"
    credentials:
      node: "linode"
    params:
      image: "linode/ubuntu18.04"
      region: "{{ params.linode_region | default('us-east') }}"
      type: "{{ params.linode_type | default('g6-standard-1') }}"
    contents:
      user_data:
        type: "env"
        name: "user_data_ubuntu"
nodes:
  discourse:
    service:
      name: "{{ params.node_service }}"
      params:
        tags:
          - "auto"
          - "discourse-dmz"
    dns_service: "dns_base_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      host_users:
        - name: "host"
          setup_log_file: "/var/log/setup.log"
          setup_finished_log_regex: "^Setup Finished.*$"
          setup_success_log_last_line: "Setup Finished - Success"
          initial_connection_timeout: 90
          setup_finished_timeout: 300
    pods: ["discourse"]
pods:
  discourse:
    repo: "discourse_docker"
    base_dir: "/var/discourse"
    flat: true
    root: true
    fast_prepare: true
    transfer:
      - dest: "shared/bin/setup"
        executable: true
        src:
          origin: "cloud"
          file: "ext-cloud/files/discourse/discourse-setup.sh"
tasks:
  task_dependencies:
    type: "task"
    file: "tasks/run/dependencies.yml"
    schema: "tasks/run/dependencies.schema.yml"
    params:
      timeout: 5
  discourse_setup:
    type: "shell"
    root: true
    cmd: "./shared/bin/setup"
  discourse_rebuild:
    type: "shell"
    root: true
    cmd: "./launcher rebuild app"
  discourse_rebuild_db:
    type: "shell"
    root: true
    cmd: "./launcher rebuild db"
  discourse_rebuild_redis:
    type: "shell"
    root: true
    cmd: "./launcher rebuild redis"
  discourse_rebuild_web:
    type: "shell"
    root: true
    cmd: "./launcher rebuild web"
contents:
  user_data_ubuntu:
    type: "template"
    origin: "cloud"
    file: "ext-cloud/files/user-data/ubuntu-18.04.tpl.sh"
    schema: "ext-cloud/files/user-data/ubuntu-18.04.schema.yml"
    params:
      user_directories: ["/var/cloud"]
      install_docker: true
      install_podman: false
      install_node_exporter: "{{ params.use_node_exporter | default(false) }}"
      install_packages: true
    credentials:
      node: "host"
    contents:
      host_ssh_public_keys: "{{ params.host_ssh_public_keys_content | default('') }}"
  discourse_app_container:
    type: "env"
    name: "discourse_container"
    params:
      type: "app"
  discourse_web_internal_container:
    type: "env"
    name: "discourse_container"
    params:
      type: "web"
      internal_redis: true
      db_same_host: true
  discourse_db_internal_container:
    type: "env"
    name: "discourse_container"
    params:
      type: "db"
      db_same_host: true
  discourse_web_container:
    type: "env"
    name: "discourse_container"
    params:
      type: "web"
  discourse_db_container:
    type: "env"
    name: "discourse_container"
    params:
      type: "db"
  discourse_redis_container:
    type: "env"
    name: "discourse_container"
    params:
      type: "redis"
  discourse_container:
    type: "template"
    origin: "cloud"
    file: "ext-cloud/files/discourse/container.tpl.yml"
    shared_params: ["discourse_params"]
    credentials:
      db: "db"
      discourse_smtp: "discourse_smtp"
      discourse_s3: "discourse_s3"
content_shared_params:
  discourse_params: "{{ params.discourse | default({}) }}"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  ext_cloud:
    src: "https://github.com/lucasbasquerotto/ext-cloud.git"
    version: "master"
  discourse_docker:
    src: "https://github.com/discourse/discourse_docker.git"
    version: "master"
credentials: "{{ credentials | combine({ 'localhost': { 'host_user': 'root' } }) }}"
