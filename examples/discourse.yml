name: "{{ params.name }}"
ctxs: ["app"]
main:
  app:
    repo: "cloud"
    env_repos:
      - repo: "custom_cloud"
        dir: "custom-cloud"
    hosts: |
      [main]
      localhost ansible_connection=local
      [host:children]
      app
      [app]
    initial_services:
      - "{{ params.env_params.vpn_service }}"
      - "{{ params.env_params.s3_buckets_service | default('s3_no_bucket', true) }}"
    nodes:
      - name: "app"
        key: "discourse"
    run_stages:
      - tasks:
          - name: "discourse_setup"
            all_nodes: true
            task_target: "pod"
          - name: "discourse_rebuild"
            all_nodes: true
            task_target: "pod"
services:
  s3_no_bucket:
    list: true
    services: []
  s3_buckets:
    list: true
    services:
      - name: "s3_backup"
        key: "s3_service_base"
        params:
          bucket: "{{ params.env_params.backup_bucket_name }}"
          permission: "private"
      - name: "s3_uploads"
        key: "s3_service_base"
        params:
          bucket: "{{ params.env_params.uploads_bucket_name }}"
          permission: "public-read"
  s3_service_base:
    base_dir: "custom-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/aws.main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    credentials:
      s3: "s3"
  node_dns_service:
    base_dir: "custom-cloud"
    namespace: "ext_dns"
    task: "tasks/dns/{{ params.env_params.dns_provider }}.main.dns.yml"
    schema: "tasks/dns/{{ params.env_params.dns_provider }}.schema.dns.yml"
    credentials:
      dns: "{{ params.env_params.dns_provider }}"
    params:
      zone: "{{ params.env_params.domain }}"
  digital_ocean_vpn:
    base_dir: "custom-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/digital_ocean.main.vpn.yml"
    schema: "tasks/vpn/digital_ocean.schema.vpn.yml"
    credentials:
      vpn: "digital_ocean"
    params:
      tags:
        - "auto"
        - "dmz"
      firewalls:
        - name: "private"
          tags: ["auto"]
          inbound_rules:
            - ports: "9080"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
            - ports: "9443"
              sources:
                addresses: "{{ params.env_params.private_ips }}"
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
                addresses: "{{ params.env_params.private_ips }}"
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "dmz"
          tags: ["dmz"]
          inbound_rules:
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
  digital_ocean_node:
    base_dir: "custom-cloud"
    namespace: "ext_node"
    task: "tasks/node/digital_ocean.main.node.yml"
    schema: "tasks/node/digital_ocean.schema.node.yml"
    credentials:
      node: "digital_ocean"
    params:
      image_id: "ubuntu-18-04-x64"
      ipv6: true
      region_id: "ams3"
      size_id: "s-1vcpu-1gb"
      tags:
        - "auto"
        - "dmz"
    contents:
      user_data:
        type: "template"
        origin: "cloud"
        file: "custom-cloud/files/user-data/ubuntu-18.04.tpl.sh"
        schema: "custom-cloud/files/user-data/ubuntu-18.04.schema.yml"
        params:
          install_docker: true
          install_podman: false
          install_packages: false
        credentials:
          node: "host"
        contents:
          host_ssh_public_keys: "{{ params.env_params.host_ssh_public_keys_content | default('') }}"
nodes:
  discourse:
    service: "{{ params.env_params.node_service }}"
    dns_service: "node_dns_service"
    base_dir: "/var"
    tmp_dir: "/tmp/discourse/node"
    root: true
    credential: "host"
    pods: ["discourse"]
    params:
      dns_service_params_list: "{{ params.env_params.dns_service_params_list | default([]) }}"
      host_test:
        setup_log_file: "/var/log/setup.log"
        setup_finished_log_regex: "^Setup Finished.*$"
        setup_success_log_last_line: "Setup Finished - Success"
        initial_connection_timeout: 90
        setup_finished_timeout: 300
pods:
  discourse:
    repo: "discourse_docker"
    root: "yes"
    fast_prepare: "true"
    flat: true
    base_dir: "discourse"
    transfer:
      - dest: "shared/setup.sh"
        mode: "0755"
        src:
          origin: "env"
          file: "custom-cloud/run-tasks/discourse-setup.sh"
      - dest: "containers/app.yml"
        src:
          type: "template"
          origin: "env"
          file: "examples/discourse/app.yml"
          credentials:
            discourse: "discourse"
    credentials:
      discourse_backup_bucket: "s3"
tasks:
  discourse_setup:
    type: "shell"
    root: true
    cmd: "./shared/setup.sh"
  discourse_rebuild:
    type: "shell"
    root: true
    cmd: "./launcher rebuild app"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  custom_cloud:
    src: "https://github.com/lucasbasquerotto/custom-cloud.git"
    version: "master"
  discourse_docker:
    src: "https://github.com/discourse/discourse_docker.git"
    version: "master"
credentials: "{{ params.credentials | default({}) }}"
