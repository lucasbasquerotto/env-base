name: "{{ project_name }}"
ctxs: "{{ project_ctxs }}"
meta: "{{ params.meta | default({ 'template_no_empty_lines': true }) }}"
cloud:
  repo: "cloud"
  ext_repos:
    - repo: "ext_cloud"
      dir: "ext-cloud"
  collections:
    - namespace: "lrd"
      collection: "ext_cloud"
      path: "ext-cloud/collection"
  hosts:
    type: "template"
    file: "files/hosts.tpl.ini"
    schema: "files/hosts.schema.yml"
main:
  cloud:
    extend_cloud: true
    initial_services:
      - name: "{{ params.cloud_service | default('skip', true) }}"
        when: "{{ (params.cloud_service | default('skip', true)) != 'skip' }}"
      - name: "{{ params.run_nameserver_main | default(false) | bool | ternary('nameserver_main_service', 'skip') }}"
        when: "{{ params.run_nameserver_main | default(false) | bool }}"
      - name: "dns_main_service"
  local:
    extend_cloud: true
    nodes:
      - name: "app"
        key: "mailcow_local"
        local: true
  remote:
    extend_cloud: true
    initial_services:
      - name: "{{ params.cloud_service | default('skip', true) }}"
        when: "{{ (params.cloud_service | default('skip', true)) != 'skip' }}"
      - name: "{{ params.run_nameserver_main | default(false) | bool | ternary('nameserver_main_service', 'skip') }}"
        when: "{{ params.run_nameserver_main | default(false) | bool }}"
      - name: "dns_main_service"
      - name: "s3_buckets"
        when: "{{ params.use_s3 | default(false) | bool }}"
        can_destroy: true
    nodes:
      - name: "app"
        key: "mailcow"
        hostname: "{{ params.app_hostname | default('') }}"
        can_destroy: true
        params:
          dns_service_params_list: "{{ params.dns_service_params_list | default([]) }}"
    run_stages:
      - tasks:
          - name: "mailcow_prepare"
            all_nodes: true
            task_target: "pod"
          - name: "mailcow_run"
            all_nodes: true
            task_target: "pod"
services:
  skip:
    list: true
    services: []
  s3_buckets:
    base_dir: "ext-cloud"
    namespace: "ext_s3"
    task: "tasks/s3/main.s3.yml"
    schema: "tasks/s3/schema.s3.yml"
    validator: "tasks/s3/validator.s3.yml"
    credentials:
      s3: "s3"
    params:
      list:
        - bucket: "{{ params.backup_bucket_name | default('') }}"
          permission: "private"
  nameserver_main_service:
    base_dir: "ext-cloud"
    namespace: "ext_nameserver"
    task: >-
      tasks/nameserver/{{
        params.nameserver_provider | default('')
      }}/{{
        params.nameserver_provider | default('')
      }}.main.nameserver.yml
    schema: >-
      tasks/nameserver/{{
        params.nameserver_provider | default('')
      }}/{{
        params.nameserver_provider | default('')
      }}.schema.nameserver.yml
    validator: >-
      tasks/nameserver/{{
        params.nameserver_provider | default('')
      }}/{{
        params.nameserver_provider | default('')
      }}.validator.nameserver.yml
    credentials:
      nameserver: "{{ params.nameserver_provider | default('') }}"
    params:
      zone: "{{ params.main_domain | default('') }}"
      nameservers: "{{ params.main_nameservers | default([]) }}"
  dns_main_service:
    list: true
    services:
      - name: "dns_base_service"
        params:
          list: "{{ params.dns_main_service_params_list | default([]) }}"
  dns_base_service:
    base_dir: "ext-cloud"
    namespace: "ext_dns"
    task: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.main.dns.yml
    schema: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.schema.dns.yml
    validator: >-
      tasks/dns/{{
        params.dns_provider | default('')
      }}/{{
        params.dns_provider | default('')
      }}.validator.dns.yml
    credentials:
      dns: "{{ params.dns_provider }}"
    params:
      zone: "{{ params.main_domain }}"
  digital_ocean_vpn:
    base_dir: "ext-cloud"
    namespace: "ext_vpn"
    task: "tasks/vpn/digital_ocean/digital_ocean.main.vpn.yml"
    schema: "tasks/vpn/digital_ocean/digital_ocean.schema.vpn.yml"
    validator: "tasks/vpn/digital_ocean/digital_ocean.validator.vpn.yml"
    credentials:
      vpn: "digital_ocean"
    params:
      tags:
        - "auto"
        - "mailcow-dmz"
      firewalls:
        - name: "auto"
          tags: ["auto"]
          inbound_rules:
            - ports: "22"
              sources:
                tags: ["main"]
                addresses: "{{ params.private_ips }}"
          outbound_rules:
            - protocol: "tcp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "udp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
            - protocol: "icmp"
              ports: "1-65535"
              destinations:
                addresses: ["0.0.0.0/0", "::/0"]
        - name: "mailcow-dmz"
          tags: ["mailcow-dmz"]
          inbound_rules:
            - ports: "25"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "80"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "110"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "143"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "465"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "587"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "993"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "995"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "4190"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "5222"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "5269"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
            - ports: "5443"
              sources:
                addresses: ["0.0.0.0/0", "::/0"]
  digital_ocean_node:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/digital_ocean/digital_ocean.main.node.yml"
    schema: "tasks/node/digital_ocean/digital_ocean.schema.node.yml"
    validator: "tasks/node/digital_ocean/digital_ocean.validator.node.yml"
    credentials:
      node: "digital_ocean"
    params:
      image_id: "ubuntu-18-04-x64"
      region_id: "{{ params.digital_ocean_node_region | default('ams3') }}"
      size_id: "{{ params.digital_ocean_node_size | default('s-2vcpu-2gb') }}"
      ipv6: true
    contents:
      user_data:
        type: "env"
        name: "user_data_ubuntu"
  linode:
    base_dir: "ext-cloud"
    namespace: "ext_node"
    task: "tasks/node/linode/linode.main.node.yml"
    schema: "tasks/node/linode/linode.schema.node.yml"
    validator: "tasks/node/linode/linode.validator.node.yml"
    credentials:
      node: "linode"
    params:
      image: "linode/ubuntu18.04"
      region: "{{ params.linode_region | default('us-east') }}"
      type: "{{ params.linode_type | default('g6-standard-1') }}"
    contents:
      user_data:
        type: "env"
        name: "user_data_ubuntu"
nodes:
  mailcow_local:
    credentials:
      host: "localhost"
    group_params:
      cron: "cron"
    pods: ["mailcow"]
  mailcow:
    service:
      name: "{{ params.node_service }}"
      params:
        tags:
          - "auto"
          - "mailcow-dmz"
    dns_service: "dns_base_service"
    base_dir: "/var/cloud"
    root: true
    credentials:
      host: "host"
    params:
      host_users:
        - name: "host"
          setup_log_file: "/var/log/setup.log"
          setup_finished_log_regex: "^Setup Finished.*$"
          setup_success_log_last_line: "Setup Finished - Success"
          initial_connection_timeout: 90
          setup_finished_timeout: 300
    group_params:
      cron: "cron"
    pods: ["mailcow"]
node_group_params:
  cron:
    - dest: "/var/spool/cron/crontabs/root"
      when: "{{ params.use_s3 | default(false) }}"
      user: "root"
      src:
        type: "template"
        origin: "cloud"
        file: "ext-cloud/files/cron/pod.tpl.sh"
        schema: "ext-cloud/files/cron/pod.schema.yml"
        params:
          run_file: "update_diffs/run-backup"
          tasks:
            - name: "backup"
              task: "no-arg"
              cron: "0 */6 * * *"
pods:
  mailcow:
    repo: "mailcow_docker"
    base_dir: "/opt/mailcow-dockerized"
    flat: true
    root: "yes"
    fast_prepare: "true"
    transfer:
      - dest: "mailcow.conf"
        src: >-
          {{
            params.mailcow_conf_content
            | default({ 'type': 'env', 'name': 'mailcow_conf' }, true)
          }}
      - dest: "data/assets/ssl/cert.pem"
        src:
          origin: "env"
          file: "{{ params.mailcow_env_dir_ssl }}/cert.pem"
      - dest: "data/assets/ssl/dhparams.pem"
        src:
          origin: "env"
          file: "{{ params.mailcow_env_dir_ssl }}/dhparams.pem"
      - dest: "data/assets/ssl/key.pem"
        src:
          origin: "env"
          file: "{{ params.mailcow_env_dir_ssl }}/key.pem"
      - dest: "data/conf/nginx/redirect.conf"
        src:
          origin: "cloud"
          file: "ext-cloud/files/mailcow/nginx.redirect.conf"
      - dest: "update_diffs/custom/config.s3.txt"
        when: "{{ params.use_s3 | default(false) }}"
        src:
          type: "template"
          origin: "cloud"
          schema: "ext-cloud/files/s3/s3-cli.schema.yml"
          file: "ext-cloud/files/s3/config.{{ params.s3_cli | default('') }}.j2"
          params:
            list:
              - alias: "backup"
                endpoint: "{{ credentials.s3.endpoint | default('') }}"
                region: "{{ credentials.s3.region | default('') }}"
                access_key: "{{ credentials.s3.access_key | default('') }}"
                secret_key: "{{ credentials.s3.secret_key | default('') }}"
      - dest: "update_diffs/custom/run-backup"
        when: "{{ params.use_s3 | default(false) }}"
        executable: true
        src:
          type: "template"
          origin: "cloud"
          schema: "ext-cloud/files/mailcow/run-backup.schema.yml"
          file: "ext-cloud/files/mailcow/run-backup.tpl.sh"
          params:
            s3_cli: "{{ params.s3_cli | default('') }}"
            s3_container_image: "{{ params.backup_s3_container_image | default('') }}"
            s3_alias: "backup"
            bucket_name: "{{ params.backup_bucket_name | default('') }}"
            bucket_path: "{{ params.backup_bucket_path | default('') }}"
            endpoint: "{{ credentials.s3.endpoint | default('') }}"
tasks:
  mailcow_prepare:
    type: "shell"
    root: true
    cmd: "docker-compose pull"
  mailcow_run:
    type: "shell"
    root: true
    cmd: "docker-compose up -d"
contents:
  mailcow_conf:
    type: "template"
    origin: "cloud"
    schema: "ext-cloud/files/mailcow/mailcow.schema.yml"
    file: "ext-cloud/files/mailcow/mailcow.tpl.conf"
    params: "{{ params.mailcow }}"
    credentials:
      db: "mailcow_db"
repos:
  cloud:
    src: "https://github.com/lucasbasquerotto/cloud.git"
    version: "master"
  ext_cloud:
    src: "https://github.com/lucasbasquerotto/ext-cloud.git"
    version: "master"
  mailcow_docker:
    src: "https://github.com/mailcow/mailcow-dockerized"
    version: "master"
credentials: "{{ credentials | combine({ 'localhost': { 'host_user': 'root' } }) }}"
